// Code generated by BobGen sql (devel). DO NOT EDIT.
// This file is meant to be re-generated in place and/or deleted at any time.

package models

import (
	"context"
	"fmt"
	"io"
	"time"

	"github.com/aarondl/opt/omit"
	"github.com/stephenafamo/bob"
	"github.com/stephenafamo/bob/dialect/sqlite"
	"github.com/stephenafamo/bob/dialect/sqlite/dialect"
	"github.com/stephenafamo/bob/dialect/sqlite/dm"
	"github.com/stephenafamo/bob/dialect/sqlite/sm"
	"github.com/stephenafamo/bob/dialect/sqlite/um"
	"github.com/stephenafamo/bob/expr"
	"github.com/stephenafamo/bob/mods"
	"github.com/stephenafamo/bob/orm"
)

// Item is an object representing the database table.
type Item struct {
	ID          int32     `db:"id,pk" `
	Name        string    `db:"name" `
	Added       time.Time `db:"added" `
	Description string    `db:"description" `
	Price       float32   `db:"price" `
	Quantity    int32     `db:"quantity" `
	UserID      int32     `db:"user_id" `

	R itemR `db:"-" `
}

// ItemSlice is an alias for a slice of pointers to Item.
// This should almost always be used instead of []*Item.
type ItemSlice []*Item

// Items contains methods to work with the item table
var Items = sqlite.NewTablex[*Item, ItemSlice, *ItemSetter]("", "item", buildItemColumns("item"))

// ItemsQuery is a query on the item table
type ItemsQuery = *sqlite.ViewQuery[*Item, ItemSlice]

// itemR is where relationships are stored.
type itemR struct {
	User *User // fk_item_0
}

func buildItemColumns(alias string) itemColumns {
	return itemColumns{
		ColumnsExpr: expr.NewColumnsExpr(
			"id", "name", "added", "description", "price", "quantity", "user_id",
		).WithParent("item"),
		tableAlias:  alias,
		ID:          sqlite.Quote(alias, "id"),
		Name:        sqlite.Quote(alias, "name"),
		Added:       sqlite.Quote(alias, "added"),
		Description: sqlite.Quote(alias, "description"),
		Price:       sqlite.Quote(alias, "price"),
		Quantity:    sqlite.Quote(alias, "quantity"),
		UserID:      sqlite.Quote(alias, "user_id"),
	}
}

type itemColumns struct {
	expr.ColumnsExpr
	tableAlias  string
	ID          sqlite.Expression
	Name        sqlite.Expression
	Added       sqlite.Expression
	Description sqlite.Expression
	Price       sqlite.Expression
	Quantity    sqlite.Expression
	UserID      sqlite.Expression
}

func (c itemColumns) Alias() string {
	return c.tableAlias
}

func (itemColumns) AliasedAs(alias string) itemColumns {
	return buildItemColumns(alias)
}

// ItemSetter is used for insert/upsert/update operations
// All values are optional, and do not have to be set
// Generated columns are not included
type ItemSetter struct {
	ID          omit.Val[int32]     `db:"id,pk" `
	Name        omit.Val[string]    `db:"name" `
	Added       omit.Val[time.Time] `db:"added" `
	Description omit.Val[string]    `db:"description" `
	Price       omit.Val[float32]   `db:"price" `
	Quantity    omit.Val[int32]     `db:"quantity" `
	UserID      omit.Val[int32]     `db:"user_id" `
}

func (s ItemSetter) SetColumns() []string {
	vals := make([]string, 0, 7)
	if s.ID.IsValue() {
		vals = append(vals, "id")
	}
	if s.Name.IsValue() {
		vals = append(vals, "name")
	}
	if s.Added.IsValue() {
		vals = append(vals, "added")
	}
	if s.Description.IsValue() {
		vals = append(vals, "description")
	}
	if s.Price.IsValue() {
		vals = append(vals, "price")
	}
	if s.Quantity.IsValue() {
		vals = append(vals, "quantity")
	}
	if s.UserID.IsValue() {
		vals = append(vals, "user_id")
	}
	return vals
}

func (s ItemSetter) Overwrite(t *Item) {
	if s.ID.IsValue() {
		t.ID = s.ID.MustGet()
	}
	if s.Name.IsValue() {
		t.Name = s.Name.MustGet()
	}
	if s.Added.IsValue() {
		t.Added = s.Added.MustGet()
	}
	if s.Description.IsValue() {
		t.Description = s.Description.MustGet()
	}
	if s.Price.IsValue() {
		t.Price = s.Price.MustGet()
	}
	if s.Quantity.IsValue() {
		t.Quantity = s.Quantity.MustGet()
	}
	if s.UserID.IsValue() {
		t.UserID = s.UserID.MustGet()
	}
}

func (s *ItemSetter) Apply(q *dialect.InsertQuery) {
	q.AppendHooks(func(ctx context.Context, exec bob.Executor) (context.Context, error) {
		return Items.BeforeInsertHooks.RunHooks(ctx, exec, s)
	})

	if len(q.TableRef.Columns) == 0 {
		q.TableRef.Columns = s.SetColumns()
		if len(q.TableRef.Columns) == 0 {
			q.TableRef.Columns = []string{"id"}
		}

	}

	q.AppendValues(bob.ExpressionFunc(func(ctx context.Context, w io.Writer, d bob.Dialect, start int) ([]any, error) {
		vals := make([]bob.Expression, 0, 7)
		if s.ID.IsValue() {
			vals = append(vals, sqlite.Arg(s.ID.MustGet()))
		}

		if s.Name.IsValue() {
			vals = append(vals, sqlite.Arg(s.Name.MustGet()))
		}

		if s.Added.IsValue() {
			vals = append(vals, sqlite.Arg(s.Added.MustGet()))
		}

		if s.Description.IsValue() {
			vals = append(vals, sqlite.Arg(s.Description.MustGet()))
		}

		if s.Price.IsValue() {
			vals = append(vals, sqlite.Arg(s.Price.MustGet()))
		}

		if s.Quantity.IsValue() {
			vals = append(vals, sqlite.Arg(s.Quantity.MustGet()))
		}

		if s.UserID.IsValue() {
			vals = append(vals, sqlite.Arg(s.UserID.MustGet()))
		}

		if len(vals) == 0 {
			vals = append(vals, sqlite.Arg(nil))
		}

		return bob.ExpressSlice(ctx, w, d, start, vals, "", ", ", "")
	}))
}

func (s ItemSetter) UpdateMod() bob.Mod[*dialect.UpdateQuery] {
	return um.Set(s.Expressions()...)
}

func (s ItemSetter) Expressions(prefix ...string) []bob.Expression {
	exprs := make([]bob.Expression, 0, 7)

	if s.ID.IsValue() {
		exprs = append(exprs, expr.Join{Sep: " = ", Exprs: []bob.Expression{
			sqlite.Quote(append(prefix, "id")...),
			sqlite.Arg(s.ID),
		}})
	}

	if s.Name.IsValue() {
		exprs = append(exprs, expr.Join{Sep: " = ", Exprs: []bob.Expression{
			sqlite.Quote(append(prefix, "name")...),
			sqlite.Arg(s.Name),
		}})
	}

	if s.Added.IsValue() {
		exprs = append(exprs, expr.Join{Sep: " = ", Exprs: []bob.Expression{
			sqlite.Quote(append(prefix, "added")...),
			sqlite.Arg(s.Added),
		}})
	}

	if s.Description.IsValue() {
		exprs = append(exprs, expr.Join{Sep: " = ", Exprs: []bob.Expression{
			sqlite.Quote(append(prefix, "description")...),
			sqlite.Arg(s.Description),
		}})
	}

	if s.Price.IsValue() {
		exprs = append(exprs, expr.Join{Sep: " = ", Exprs: []bob.Expression{
			sqlite.Quote(append(prefix, "price")...),
			sqlite.Arg(s.Price),
		}})
	}

	if s.Quantity.IsValue() {
		exprs = append(exprs, expr.Join{Sep: " = ", Exprs: []bob.Expression{
			sqlite.Quote(append(prefix, "quantity")...),
			sqlite.Arg(s.Quantity),
		}})
	}

	if s.UserID.IsValue() {
		exprs = append(exprs, expr.Join{Sep: " = ", Exprs: []bob.Expression{
			sqlite.Quote(append(prefix, "user_id")...),
			sqlite.Arg(s.UserID),
		}})
	}

	return exprs
}

// FindItem retrieves a single record by primary key
// If cols is empty Find will return all columns.
func FindItem(ctx context.Context, exec bob.Executor, IDPK int32, cols ...string) (*Item, error) {
	if len(cols) == 0 {
		return Items.Query(
			sm.Where(Items.Columns.ID.EQ(sqlite.Arg(IDPK))),
		).One(ctx, exec)
	}

	return Items.Query(
		sm.Where(Items.Columns.ID.EQ(sqlite.Arg(IDPK))),
		sm.Columns(Items.Columns.Only(cols...)),
	).One(ctx, exec)
}

// ItemExists checks the presence of a single record by primary key
func ItemExists(ctx context.Context, exec bob.Executor, IDPK int32) (bool, error) {
	return Items.Query(
		sm.Where(Items.Columns.ID.EQ(sqlite.Arg(IDPK))),
	).Exists(ctx, exec)
}

// AfterQueryHook is called after Item is retrieved from the database
func (o *Item) AfterQueryHook(ctx context.Context, exec bob.Executor, queryType bob.QueryType) error {
	var err error

	switch queryType {
	case bob.QueryTypeSelect:
		ctx, err = Items.AfterSelectHooks.RunHooks(ctx, exec, ItemSlice{o})
	case bob.QueryTypeInsert:
		ctx, err = Items.AfterInsertHooks.RunHooks(ctx, exec, ItemSlice{o})
	case bob.QueryTypeUpdate:
		ctx, err = Items.AfterUpdateHooks.RunHooks(ctx, exec, ItemSlice{o})
	case bob.QueryTypeDelete:
		ctx, err = Items.AfterDeleteHooks.RunHooks(ctx, exec, ItemSlice{o})
	}

	return err
}

// primaryKeyVals returns the primary key values of the Item
func (o *Item) primaryKeyVals() bob.Expression {
	return sqlite.Arg(o.ID)
}

func (o *Item) pkEQ() dialect.Expression {
	return sqlite.Quote("item", "id").EQ(bob.ExpressionFunc(func(ctx context.Context, w io.Writer, d bob.Dialect, start int) ([]any, error) {
		return o.primaryKeyVals().WriteSQL(ctx, w, d, start)
	}))
}

// Update uses an executor to update the Item
func (o *Item) Update(ctx context.Context, exec bob.Executor, s *ItemSetter) error {
	v, err := Items.Update(s.UpdateMod(), um.Where(o.pkEQ())).One(ctx, exec)
	if err != nil {
		return err
	}

	o.R = v.R
	*o = *v

	return nil
}

// Delete deletes a single Item record with an executor
func (o *Item) Delete(ctx context.Context, exec bob.Executor) error {
	_, err := Items.Delete(dm.Where(o.pkEQ())).Exec(ctx, exec)
	return err
}

// Reload refreshes the Item using the executor
func (o *Item) Reload(ctx context.Context, exec bob.Executor) error {
	o2, err := Items.Query(
		sm.Where(Items.Columns.ID.EQ(sqlite.Arg(o.ID))),
	).One(ctx, exec)
	if err != nil {
		return err
	}
	o2.R = o.R
	*o = *o2

	return nil
}

// AfterQueryHook is called after ItemSlice is retrieved from the database
func (o ItemSlice) AfterQueryHook(ctx context.Context, exec bob.Executor, queryType bob.QueryType) error {
	var err error

	switch queryType {
	case bob.QueryTypeSelect:
		ctx, err = Items.AfterSelectHooks.RunHooks(ctx, exec, o)
	case bob.QueryTypeInsert:
		ctx, err = Items.AfterInsertHooks.RunHooks(ctx, exec, o)
	case bob.QueryTypeUpdate:
		ctx, err = Items.AfterUpdateHooks.RunHooks(ctx, exec, o)
	case bob.QueryTypeDelete:
		ctx, err = Items.AfterDeleteHooks.RunHooks(ctx, exec, o)
	}

	return err
}

func (o ItemSlice) pkIN() dialect.Expression {
	if len(o) == 0 {
		return sqlite.Raw("NULL")
	}

	return sqlite.Quote("item", "id").In(bob.ExpressionFunc(func(ctx context.Context, w io.Writer, d bob.Dialect, start int) ([]any, error) {
		pkPairs := make([]bob.Expression, len(o))
		for i, row := range o {
			pkPairs[i] = row.primaryKeyVals()
		}
		return bob.ExpressSlice(ctx, w, d, start, pkPairs, "", ", ", "")
	}))
}

// copyMatchingRows finds models in the given slice that have the same primary key
// then it first copies the existing relationships from the old model to the new model
// and then replaces the old model in the slice with the new model
func (o ItemSlice) copyMatchingRows(from ...*Item) {
	for i, old := range o {
		for _, new := range from {
			if new.ID != old.ID {
				continue
			}
			new.R = old.R
			o[i] = new
			break
		}
	}
}

// UpdateMod modifies an update query with "WHERE primary_key IN (o...)"
func (o ItemSlice) UpdateMod() bob.Mod[*dialect.UpdateQuery] {
	return bob.ModFunc[*dialect.UpdateQuery](func(q *dialect.UpdateQuery) {
		q.AppendHooks(func(ctx context.Context, exec bob.Executor) (context.Context, error) {
			return Items.BeforeUpdateHooks.RunHooks(ctx, exec, o)
		})

		q.AppendLoader(bob.LoaderFunc(func(ctx context.Context, exec bob.Executor, retrieved any) error {
			var err error
			switch retrieved := retrieved.(type) {
			case *Item:
				o.copyMatchingRows(retrieved)
			case []*Item:
				o.copyMatchingRows(retrieved...)
			case ItemSlice:
				o.copyMatchingRows(retrieved...)
			default:
				// If the retrieved value is not a Item or a slice of Item
				// then run the AfterUpdateHooks on the slice
				_, err = Items.AfterUpdateHooks.RunHooks(ctx, exec, o)
			}

			return err
		}))

		q.AppendWhere(o.pkIN())
	})
}

// DeleteMod modifies an delete query with "WHERE primary_key IN (o...)"
func (o ItemSlice) DeleteMod() bob.Mod[*dialect.DeleteQuery] {
	return bob.ModFunc[*dialect.DeleteQuery](func(q *dialect.DeleteQuery) {
		q.AppendHooks(func(ctx context.Context, exec bob.Executor) (context.Context, error) {
			return Items.BeforeDeleteHooks.RunHooks(ctx, exec, o)
		})

		q.AppendLoader(bob.LoaderFunc(func(ctx context.Context, exec bob.Executor, retrieved any) error {
			var err error
			switch retrieved := retrieved.(type) {
			case *Item:
				o.copyMatchingRows(retrieved)
			case []*Item:
				o.copyMatchingRows(retrieved...)
			case ItemSlice:
				o.copyMatchingRows(retrieved...)
			default:
				// If the retrieved value is not a Item or a slice of Item
				// then run the AfterDeleteHooks on the slice
				_, err = Items.AfterDeleteHooks.RunHooks(ctx, exec, o)
			}

			return err
		}))

		q.AppendWhere(o.pkIN())
	})
}

func (o ItemSlice) UpdateAll(ctx context.Context, exec bob.Executor, vals ItemSetter) error {
	if len(o) == 0 {
		return nil
	}

	_, err := Items.Update(vals.UpdateMod(), o.UpdateMod()).All(ctx, exec)
	return err
}

func (o ItemSlice) DeleteAll(ctx context.Context, exec bob.Executor) error {
	if len(o) == 0 {
		return nil
	}

	_, err := Items.Delete(o.DeleteMod()).Exec(ctx, exec)
	return err
}

func (o ItemSlice) ReloadAll(ctx context.Context, exec bob.Executor) error {
	if len(o) == 0 {
		return nil
	}

	o2, err := Items.Query(sm.Where(o.pkIN())).All(ctx, exec)
	if err != nil {
		return err
	}

	o.copyMatchingRows(o2...)

	return nil
}

// User starts a query for related objects on user
func (o *Item) User(mods ...bob.Mod[*dialect.SelectQuery]) UsersQuery {
	return Users.Query(append(mods,
		sm.Where(Users.Columns.ID.EQ(sqlite.Arg(o.UserID))),
	)...)
}

func (os ItemSlice) User(mods ...bob.Mod[*dialect.SelectQuery]) UsersQuery {
	PKArgSlice := make([]bob.Expression, len(os))
	for i, o := range os {
		PKArgSlice[i] = sqlite.ArgGroup(o.UserID)
	}
	PKArgExpr := sqlite.Group(PKArgSlice...)

	return Users.Query(append(mods,
		sm.Where(sqlite.Group(Users.Columns.ID).OP("IN", PKArgExpr)),
	)...)
}

func attachItemUser0(ctx context.Context, exec bob.Executor, count int, item0 *Item, user1 *User) (*Item, error) {
	setter := &ItemSetter{
		UserID: omit.From(user1.ID),
	}

	err := item0.Update(ctx, exec, setter)
	if err != nil {
		return nil, fmt.Errorf("attachItemUser0: %w", err)
	}

	return item0, nil
}

func (item0 *Item) InsertUser(ctx context.Context, exec bob.Executor, related *UserSetter) error {
	user1, err := Users.Insert(related).One(ctx, exec)
	if err != nil {
		return fmt.Errorf("inserting related objects: %w", err)
	}

	_, err = attachItemUser0(ctx, exec, 1, item0, user1)
	if err != nil {
		return err
	}

	item0.R.User = user1

	user1.R.Items = append(user1.R.Items, item0)

	return nil
}

func (item0 *Item) AttachUser(ctx context.Context, exec bob.Executor, user1 *User) error {
	var err error

	_, err = attachItemUser0(ctx, exec, 1, item0, user1)
	if err != nil {
		return err
	}

	item0.R.User = user1

	user1.R.Items = append(user1.R.Items, item0)

	return nil
}

type itemWhere[Q sqlite.Filterable] struct {
	ID          sqlite.WhereMod[Q, int32]
	Name        sqlite.WhereMod[Q, string]
	Added       sqlite.WhereMod[Q, time.Time]
	Description sqlite.WhereMod[Q, string]
	Price       sqlite.WhereMod[Q, float32]
	Quantity    sqlite.WhereMod[Q, int32]
	UserID      sqlite.WhereMod[Q, int32]
}

func (itemWhere[Q]) AliasedAs(alias string) itemWhere[Q] {
	return buildItemWhere[Q](buildItemColumns(alias))
}

func buildItemWhere[Q sqlite.Filterable](cols itemColumns) itemWhere[Q] {
	return itemWhere[Q]{
		ID:          sqlite.Where[Q, int32](cols.ID),
		Name:        sqlite.Where[Q, string](cols.Name),
		Added:       sqlite.Where[Q, time.Time](cols.Added),
		Description: sqlite.Where[Q, string](cols.Description),
		Price:       sqlite.Where[Q, float32](cols.Price),
		Quantity:    sqlite.Where[Q, int32](cols.Quantity),
		UserID:      sqlite.Where[Q, int32](cols.UserID),
	}
}

func (o *Item) Preload(name string, retrieved any) error {
	if o == nil {
		return nil
	}

	switch name {
	case "User":
		rel, ok := retrieved.(*User)
		if !ok {
			return fmt.Errorf("item cannot load %T as %q", retrieved, name)
		}

		o.R.User = rel

		if rel != nil {
			rel.R.Items = ItemSlice{o}
		}
		return nil
	default:
		return fmt.Errorf("item has no relationship %q", name)
	}
}

type itemPreloader struct {
	User func(...sqlite.PreloadOption) sqlite.Preloader
}

func buildItemPreloader() itemPreloader {
	return itemPreloader{
		User: func(opts ...sqlite.PreloadOption) sqlite.Preloader {
			return sqlite.Preload[*User, UserSlice](sqlite.PreloadRel{
				Name: "User",
				Sides: []sqlite.PreloadSide{
					{
						From:        Items,
						To:          Users,
						FromColumns: []string{"user_id"},
						ToColumns:   []string{"id"},
					},
				},
			}, Users.Columns.Names(), opts...)
		},
	}
}

type itemThenLoader[Q orm.Loadable] struct {
	User func(...bob.Mod[*dialect.SelectQuery]) orm.Loader[Q]
}

func buildItemThenLoader[Q orm.Loadable]() itemThenLoader[Q] {
	type UserLoadInterface interface {
		LoadUser(context.Context, bob.Executor, ...bob.Mod[*dialect.SelectQuery]) error
	}

	return itemThenLoader[Q]{
		User: thenLoadBuilder[Q](
			"User",
			func(ctx context.Context, exec bob.Executor, retrieved UserLoadInterface, mods ...bob.Mod[*dialect.SelectQuery]) error {
				return retrieved.LoadUser(ctx, exec, mods...)
			},
		),
	}
}

// LoadUser loads the item's User into the .R struct
func (o *Item) LoadUser(ctx context.Context, exec bob.Executor, mods ...bob.Mod[*dialect.SelectQuery]) error {
	if o == nil {
		return nil
	}

	// Reset the relationship
	o.R.User = nil

	related, err := o.User(mods...).One(ctx, exec)
	if err != nil {
		return err
	}

	related.R.Items = ItemSlice{o}

	o.R.User = related
	return nil
}

// LoadUser loads the item's User into the .R struct
func (os ItemSlice) LoadUser(ctx context.Context, exec bob.Executor, mods ...bob.Mod[*dialect.SelectQuery]) error {
	if len(os) == 0 {
		return nil
	}

	users, err := os.User(mods...).All(ctx, exec)
	if err != nil {
		return err
	}

	for _, o := range os {
		if o == nil {
			continue
		}

		for _, rel := range users {

			if o.UserID != rel.ID {
				continue
			}

			rel.R.Items = append(rel.R.Items, o)

			o.R.User = rel
			break
		}
	}

	return nil
}

type itemJoins[Q dialect.Joinable] struct {
	typ  string
	User modAs[Q, userColumns]
}

func (j itemJoins[Q]) aliasedAs(alias string) itemJoins[Q] {
	return buildItemJoins[Q](buildItemColumns(alias), j.typ)
}

func buildItemJoins[Q dialect.Joinable](cols itemColumns, typ string) itemJoins[Q] {
	return itemJoins[Q]{
		typ: typ,
		User: modAs[Q, userColumns]{
			c: Users.Columns,
			f: func(to userColumns) bob.Mod[Q] {
				mods := make(mods.QueryMods[Q], 0, 1)

				{
					mods = append(mods, dialect.Join[Q](typ, Users.Name().As(to.Alias())).On(
						to.ID.EQ(cols.UserID),
					))
				}

				return mods
			},
		},
	}
}

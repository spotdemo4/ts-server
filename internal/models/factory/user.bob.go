// Code generated by BobGen sql (devel). DO NOT EDIT.
// This file is meant to be re-generated in place and/or deleted at any time.

package factory

import (
	"context"
	"database/sql"
	"testing"

	"github.com/jaswdr/faker/v2"
	models "github.com/spotdemo4/ts-server/internal/models"
	"github.com/stephenafamo/bob"
)

type UserMod interface {
	Apply(context.Context, *UserTemplate)
}

type UserModFunc func(context.Context, *UserTemplate)

func (f UserModFunc) Apply(ctx context.Context, n *UserTemplate) {
	f(ctx, n)
}

type UserModSlice []UserMod

func (mods UserModSlice) Apply(ctx context.Context, n *UserTemplate) {
	for _, f := range mods {
		f.Apply(ctx, n)
	}
}

// UserTemplate is an object representing the database table.
// all columns are optional and should be set by mods
type UserTemplate struct {
	ID               func() int32
	Username         func() string
	Password         func() string
	ProfilePictureID func() sql.Null[int32]
	WebauthnID       func() string

	r userR
	f *Factory
}

type userR struct {
	Credentials        []*userRCredentialsR
	Files              []*userRFilesR
	Items              []*userRItemsR
	ProfilePictureFile *userRProfilePictureFileR
}

type userRCredentialsR struct {
	number int
	o      *CredentialTemplate
}
type userRFilesR struct {
	number int
	o      *FileTemplate
}
type userRItemsR struct {
	number int
	o      *ItemTemplate
}
type userRProfilePictureFileR struct {
	o *FileTemplate
}

// Apply mods to the UserTemplate
func (o *UserTemplate) Apply(ctx context.Context, mods ...UserMod) {
	for _, mod := range mods {
		mod.Apply(ctx, o)
	}
}

// setModelRels creates and sets the relationships on *models.User
// according to the relationships in the template. Nothing is inserted into the db
func (t UserTemplate) setModelRels(o *models.User) {
	if t.r.Credentials != nil {
		rel := models.CredentialSlice{}
		for _, r := range t.r.Credentials {
			related := r.o.BuildMany(r.number)
			for _, rel := range related {
				rel.UserID = o.ID // h2
				rel.R.User = o
			}
			rel = append(rel, related...)
		}
		o.R.Credentials = rel
	}

	if t.r.Files != nil {
		rel := models.FileSlice{}
		for _, r := range t.r.Files {
			related := r.o.BuildMany(r.number)
			for _, rel := range related {
				rel.UserID = o.ID // h2
				rel.R.User = o
			}
			rel = append(rel, related...)
		}
		o.R.Files = rel
	}

	if t.r.Items != nil {
		rel := models.ItemSlice{}
		for _, r := range t.r.Items {
			related := r.o.BuildMany(r.number)
			for _, rel := range related {
				rel.UserID = o.ID // h2
				rel.R.User = o
			}
			rel = append(rel, related...)
		}
		o.R.Items = rel
	}

	if t.r.ProfilePictureFile != nil {
		rel := t.r.ProfilePictureFile.o.Build()
		rel.R.ProfilePictureUsers = append(rel.R.ProfilePictureUsers, o)
		o.ProfilePictureID = sql.Null[int32]{V: rel.ID, Valid: true} // h2
		o.R.ProfilePictureFile = rel
	}
}

// BuildSetter returns an *models.UserSetter
// this does nothing with the relationship templates
func (o UserTemplate) BuildSetter() *models.UserSetter {
	m := &models.UserSetter{}

	if o.ID != nil {
		val := o.ID()
		m.ID = &val
	}
	if o.Username != nil {
		val := o.Username()
		m.Username = &val
	}
	if o.Password != nil {
		val := o.Password()
		m.Password = &val
	}
	if o.ProfilePictureID != nil {
		val := o.ProfilePictureID()
		m.ProfilePictureID = &val
	}
	if o.WebauthnID != nil {
		val := o.WebauthnID()
		m.WebauthnID = &val
	}

	return m
}

// BuildManySetter returns an []*models.UserSetter
// this does nothing with the relationship templates
func (o UserTemplate) BuildManySetter(number int) []*models.UserSetter {
	m := make([]*models.UserSetter, number)

	for i := range m {
		m[i] = o.BuildSetter()
	}

	return m
}

// Build returns an *models.User
// Related objects are also created and placed in the .R field
// NOTE: Objects are not inserted into the database. Use UserTemplate.Create
func (o UserTemplate) Build() *models.User {
	m := &models.User{}

	if o.ID != nil {
		m.ID = o.ID()
	}
	if o.Username != nil {
		m.Username = o.Username()
	}
	if o.Password != nil {
		m.Password = o.Password()
	}
	if o.ProfilePictureID != nil {
		m.ProfilePictureID = o.ProfilePictureID()
	}
	if o.WebauthnID != nil {
		m.WebauthnID = o.WebauthnID()
	}

	o.setModelRels(m)

	return m
}

// BuildMany returns an models.UserSlice
// Related objects are also created and placed in the .R field
// NOTE: Objects are not inserted into the database. Use UserTemplate.CreateMany
func (o UserTemplate) BuildMany(number int) models.UserSlice {
	m := make(models.UserSlice, number)

	for i := range m {
		m[i] = o.Build()
	}

	return m
}

func ensureCreatableUser(m *models.UserSetter) {
	if m.Username == nil {
		val := random_string(nil)
		m.Username = &val
	}
	if m.Password == nil {
		val := random_string(nil)
		m.Password = &val
	}
	if m.WebauthnID == nil {
		val := random_string(nil)
		m.WebauthnID = &val
	}
}

// insertOptRels creates and inserts any optional the relationships on *models.User
// according to the relationships in the template.
// any required relationship should have already exist on the model
func (o *UserTemplate) insertOptRels(ctx context.Context, exec bob.Executor, m *models.User) (context.Context, error) {
	var err error

	isCredentialsDone, _ := userRelCredentialsCtx.Value(ctx)
	if !isCredentialsDone && o.r.Credentials != nil {
		ctx = userRelCredentialsCtx.WithValue(ctx, true)
		for _, r := range o.r.Credentials {
			var rel0 models.CredentialSlice
			ctx, rel0, err = r.o.createMany(ctx, exec, r.number)
			if err != nil {
				return ctx, err
			}

			err = m.AttachCredentials(ctx, exec, rel0...)
			if err != nil {
				return ctx, err
			}
		}
	}

	isFilesDone, _ := userRelFilesCtx.Value(ctx)
	if !isFilesDone && o.r.Files != nil {
		ctx = userRelFilesCtx.WithValue(ctx, true)
		for _, r := range o.r.Files {
			var rel1 models.FileSlice
			ctx, rel1, err = r.o.createMany(ctx, exec, r.number)
			if err != nil {
				return ctx, err
			}

			err = m.AttachFiles(ctx, exec, rel1...)
			if err != nil {
				return ctx, err
			}
		}
	}

	isItemsDone, _ := userRelItemsCtx.Value(ctx)
	if !isItemsDone && o.r.Items != nil {
		ctx = userRelItemsCtx.WithValue(ctx, true)
		for _, r := range o.r.Items {
			var rel2 models.ItemSlice
			ctx, rel2, err = r.o.createMany(ctx, exec, r.number)
			if err != nil {
				return ctx, err
			}

			err = m.AttachItems(ctx, exec, rel2...)
			if err != nil {
				return ctx, err
			}
		}
	}

	isProfilePictureFileDone, _ := userRelProfilePictureFileCtx.Value(ctx)
	if !isProfilePictureFileDone && o.r.ProfilePictureFile != nil {
		ctx = userRelProfilePictureFileCtx.WithValue(ctx, true)
		var rel3 *models.File
		ctx, rel3, err = o.r.ProfilePictureFile.o.create(ctx, exec)
		if err != nil {
			return ctx, err
		}
		err = m.AttachProfilePictureFile(ctx, exec, rel3)
		if err != nil {
			return ctx, err
		}

	}

	return ctx, err
}

// Create builds a user and inserts it into the database
// Relations objects are also inserted and placed in the .R field
func (o *UserTemplate) Create(ctx context.Context, exec bob.Executor) (*models.User, error) {
	_, m, err := o.create(ctx, exec)
	return m, err
}

// MustCreate builds a user and inserts it into the database
// Relations objects are also inserted and placed in the .R field
// panics if an error occurs
func (o *UserTemplate) MustCreate(ctx context.Context, exec bob.Executor) *models.User {
	_, m, err := o.create(ctx, exec)
	if err != nil {
		panic(err)
	}
	return m
}

// CreateOrFail builds a user and inserts it into the database
// Relations objects are also inserted and placed in the .R field
// It calls `tb.Fatal(err)` on the test/benchmark if an error occurs
func (o *UserTemplate) CreateOrFail(ctx context.Context, tb testing.TB, exec bob.Executor) *models.User {
	tb.Helper()
	_, m, err := o.create(ctx, exec)
	if err != nil {
		tb.Fatal(err)
		return nil
	}
	return m
}

// create builds a user and inserts it into the database
// Relations objects are also inserted and placed in the .R field
// this returns a context that includes the newly inserted model
func (o *UserTemplate) create(ctx context.Context, exec bob.Executor) (context.Context, *models.User, error) {
	var err error
	opt := o.BuildSetter()
	ensureCreatableUser(opt)

	m, err := models.Users.Insert(opt).One(ctx, exec)
	if err != nil {
		return ctx, nil, err
	}
	ctx = userCtx.WithValue(ctx, m)

	ctx, err = o.insertOptRels(ctx, exec, m)
	return ctx, m, err
}

// CreateMany builds multiple users and inserts them into the database
// Relations objects are also inserted and placed in the .R field
func (o UserTemplate) CreateMany(ctx context.Context, exec bob.Executor, number int) (models.UserSlice, error) {
	_, m, err := o.createMany(ctx, exec, number)
	return m, err
}

// MustCreateMany builds multiple users and inserts them into the database
// Relations objects are also inserted and placed in the .R field
// panics if an error occurs
func (o UserTemplate) MustCreateMany(ctx context.Context, exec bob.Executor, number int) models.UserSlice {
	_, m, err := o.createMany(ctx, exec, number)
	if err != nil {
		panic(err)
	}
	return m
}

// CreateManyOrFail builds multiple users and inserts them into the database
// Relations objects are also inserted and placed in the .R field
// It calls `tb.Fatal(err)` on the test/benchmark if an error occurs
func (o UserTemplate) CreateManyOrFail(ctx context.Context, tb testing.TB, exec bob.Executor, number int) models.UserSlice {
	tb.Helper()
	_, m, err := o.createMany(ctx, exec, number)
	if err != nil {
		tb.Fatal(err)
		return nil
	}
	return m
}

// createMany builds multiple users and inserts them into the database
// Relations objects are also inserted and placed in the .R field
// this returns a context that includes the newly inserted models
func (o UserTemplate) createMany(ctx context.Context, exec bob.Executor, number int) (context.Context, models.UserSlice, error) {
	var err error
	m := make(models.UserSlice, number)

	for i := range m {
		ctx, m[i], err = o.create(ctx, exec)
		if err != nil {
			return ctx, nil, err
		}
	}

	return ctx, m, nil
}

// User has methods that act as mods for the UserTemplate
var UserMods userMods

type userMods struct{}

func (m userMods) RandomizeAllColumns(f *faker.Faker) UserMod {
	return UserModSlice{
		UserMods.RandomID(f),
		UserMods.RandomUsername(f),
		UserMods.RandomPassword(f),
		UserMods.RandomProfilePictureID(f),
		UserMods.RandomWebauthnID(f),
	}
}

// Set the model columns to this value
func (m userMods) ID(val int32) UserMod {
	return UserModFunc(func(_ context.Context, o *UserTemplate) {
		o.ID = func() int32 { return val }
	})
}

// Set the Column from the function
func (m userMods) IDFunc(f func() int32) UserMod {
	return UserModFunc(func(_ context.Context, o *UserTemplate) {
		o.ID = f
	})
}

// Clear any values for the column
func (m userMods) UnsetID() UserMod {
	return UserModFunc(func(_ context.Context, o *UserTemplate) {
		o.ID = nil
	})
}

// Generates a random value for the column using the given faker
// if faker is nil, a default faker is used
func (m userMods) RandomID(f *faker.Faker) UserMod {
	return UserModFunc(func(_ context.Context, o *UserTemplate) {
		o.ID = func() int32 {
			return random_int32(f)
		}
	})
}

// Set the model columns to this value
func (m userMods) Username(val string) UserMod {
	return UserModFunc(func(_ context.Context, o *UserTemplate) {
		o.Username = func() string { return val }
	})
}

// Set the Column from the function
func (m userMods) UsernameFunc(f func() string) UserMod {
	return UserModFunc(func(_ context.Context, o *UserTemplate) {
		o.Username = f
	})
}

// Clear any values for the column
func (m userMods) UnsetUsername() UserMod {
	return UserModFunc(func(_ context.Context, o *UserTemplate) {
		o.Username = nil
	})
}

// Generates a random value for the column using the given faker
// if faker is nil, a default faker is used
func (m userMods) RandomUsername(f *faker.Faker) UserMod {
	return UserModFunc(func(_ context.Context, o *UserTemplate) {
		o.Username = func() string {
			return random_string(f)
		}
	})
}

// Set the model columns to this value
func (m userMods) Password(val string) UserMod {
	return UserModFunc(func(_ context.Context, o *UserTemplate) {
		o.Password = func() string { return val }
	})
}

// Set the Column from the function
func (m userMods) PasswordFunc(f func() string) UserMod {
	return UserModFunc(func(_ context.Context, o *UserTemplate) {
		o.Password = f
	})
}

// Clear any values for the column
func (m userMods) UnsetPassword() UserMod {
	return UserModFunc(func(_ context.Context, o *UserTemplate) {
		o.Password = nil
	})
}

// Generates a random value for the column using the given faker
// if faker is nil, a default faker is used
func (m userMods) RandomPassword(f *faker.Faker) UserMod {
	return UserModFunc(func(_ context.Context, o *UserTemplate) {
		o.Password = func() string {
			return random_string(f)
		}
	})
}

// Set the model columns to this value
func (m userMods) ProfilePictureID(val sql.Null[int32]) UserMod {
	return UserModFunc(func(_ context.Context, o *UserTemplate) {
		o.ProfilePictureID = func() sql.Null[int32] { return val }
	})
}

// Set the Column from the function
func (m userMods) ProfilePictureIDFunc(f func() sql.Null[int32]) UserMod {
	return UserModFunc(func(_ context.Context, o *UserTemplate) {
		o.ProfilePictureID = f
	})
}

// Clear any values for the column
func (m userMods) UnsetProfilePictureID() UserMod {
	return UserModFunc(func(_ context.Context, o *UserTemplate) {
		o.ProfilePictureID = nil
	})
}

// Generates a random value for the column using the given faker
// if faker is nil, a default faker is used
// The generated value is sometimes null
func (m userMods) RandomProfilePictureID(f *faker.Faker) UserMod {
	return UserModFunc(func(_ context.Context, o *UserTemplate) {
		o.ProfilePictureID = func() sql.Null[int32] {
			if f == nil {
				f = &defaultFaker
			}

			val := random_int32(f)
			return sql.Null[int32]{V: val, Valid: f.Bool()}
		}
	})
}

// Generates a random value for the column using the given faker
// if faker is nil, a default faker is used
// The generated value is never null
func (m userMods) RandomProfilePictureIDNotNull(f *faker.Faker) UserMod {
	return UserModFunc(func(_ context.Context, o *UserTemplate) {
		o.ProfilePictureID = func() sql.Null[int32] {
			if f == nil {
				f = &defaultFaker
			}

			val := random_int32(f)
			return sql.Null[int32]{V: val, Valid: true}
		}
	})
}

// Set the model columns to this value
func (m userMods) WebauthnID(val string) UserMod {
	return UserModFunc(func(_ context.Context, o *UserTemplate) {
		o.WebauthnID = func() string { return val }
	})
}

// Set the Column from the function
func (m userMods) WebauthnIDFunc(f func() string) UserMod {
	return UserModFunc(func(_ context.Context, o *UserTemplate) {
		o.WebauthnID = f
	})
}

// Clear any values for the column
func (m userMods) UnsetWebauthnID() UserMod {
	return UserModFunc(func(_ context.Context, o *UserTemplate) {
		o.WebauthnID = nil
	})
}

// Generates a random value for the column using the given faker
// if faker is nil, a default faker is used
func (m userMods) RandomWebauthnID(f *faker.Faker) UserMod {
	return UserModFunc(func(_ context.Context, o *UserTemplate) {
		o.WebauthnID = func() string {
			return random_string(f)
		}
	})
}

func (m userMods) WithParentsCascading() UserMod {
	return UserModFunc(func(ctx context.Context, o *UserTemplate) {
		if isDone, _ := userWithParentsCascadingCtx.Value(ctx); isDone {
			return
		}
		ctx = userWithParentsCascadingCtx.WithValue(ctx, true)
		{

			related := o.f.NewFile(ctx, FileMods.WithParentsCascading())
			m.WithProfilePictureFile(related).Apply(ctx, o)
		}
	})
}

func (m userMods) WithProfilePictureFile(rel *FileTemplate) UserMod {
	return UserModFunc(func(ctx context.Context, o *UserTemplate) {
		o.r.ProfilePictureFile = &userRProfilePictureFileR{
			o: rel,
		}
	})
}

func (m userMods) WithNewProfilePictureFile(mods ...FileMod) UserMod {
	return UserModFunc(func(ctx context.Context, o *UserTemplate) {
		related := o.f.NewFile(ctx, mods...)

		m.WithProfilePictureFile(related).Apply(ctx, o)
	})
}

func (m userMods) WithoutProfilePictureFile() UserMod {
	return UserModFunc(func(ctx context.Context, o *UserTemplate) {
		o.r.ProfilePictureFile = nil
	})
}

func (m userMods) WithCredentials(number int, related *CredentialTemplate) UserMod {
	return UserModFunc(func(ctx context.Context, o *UserTemplate) {
		o.r.Credentials = []*userRCredentialsR{{
			number: number,
			o:      related,
		}}
	})
}

func (m userMods) WithNewCredentials(number int, mods ...CredentialMod) UserMod {
	return UserModFunc(func(ctx context.Context, o *UserTemplate) {
		related := o.f.NewCredential(ctx, mods...)
		m.WithCredentials(number, related).Apply(ctx, o)
	})
}

func (m userMods) AddCredentials(number int, related *CredentialTemplate) UserMod {
	return UserModFunc(func(ctx context.Context, o *UserTemplate) {
		o.r.Credentials = append(o.r.Credentials, &userRCredentialsR{
			number: number,
			o:      related,
		})
	})
}

func (m userMods) AddNewCredentials(number int, mods ...CredentialMod) UserMod {
	return UserModFunc(func(ctx context.Context, o *UserTemplate) {
		related := o.f.NewCredential(ctx, mods...)
		m.AddCredentials(number, related).Apply(ctx, o)
	})
}

func (m userMods) WithoutCredentials() UserMod {
	return UserModFunc(func(ctx context.Context, o *UserTemplate) {
		o.r.Credentials = nil
	})
}

func (m userMods) WithFiles(number int, related *FileTemplate) UserMod {
	return UserModFunc(func(ctx context.Context, o *UserTemplate) {
		o.r.Files = []*userRFilesR{{
			number: number,
			o:      related,
		}}
	})
}

func (m userMods) WithNewFiles(number int, mods ...FileMod) UserMod {
	return UserModFunc(func(ctx context.Context, o *UserTemplate) {
		related := o.f.NewFile(ctx, mods...)
		m.WithFiles(number, related).Apply(ctx, o)
	})
}

func (m userMods) AddFiles(number int, related *FileTemplate) UserMod {
	return UserModFunc(func(ctx context.Context, o *UserTemplate) {
		o.r.Files = append(o.r.Files, &userRFilesR{
			number: number,
			o:      related,
		})
	})
}

func (m userMods) AddNewFiles(number int, mods ...FileMod) UserMod {
	return UserModFunc(func(ctx context.Context, o *UserTemplate) {
		related := o.f.NewFile(ctx, mods...)
		m.AddFiles(number, related).Apply(ctx, o)
	})
}

func (m userMods) WithoutFiles() UserMod {
	return UserModFunc(func(ctx context.Context, o *UserTemplate) {
		o.r.Files = nil
	})
}

func (m userMods) WithItems(number int, related *ItemTemplate) UserMod {
	return UserModFunc(func(ctx context.Context, o *UserTemplate) {
		o.r.Items = []*userRItemsR{{
			number: number,
			o:      related,
		}}
	})
}

func (m userMods) WithNewItems(number int, mods ...ItemMod) UserMod {
	return UserModFunc(func(ctx context.Context, o *UserTemplate) {
		related := o.f.NewItem(ctx, mods...)
		m.WithItems(number, related).Apply(ctx, o)
	})
}

func (m userMods) AddItems(number int, related *ItemTemplate) UserMod {
	return UserModFunc(func(ctx context.Context, o *UserTemplate) {
		o.r.Items = append(o.r.Items, &userRItemsR{
			number: number,
			o:      related,
		})
	})
}

func (m userMods) AddNewItems(number int, mods ...ItemMod) UserMod {
	return UserModFunc(func(ctx context.Context, o *UserTemplate) {
		related := o.f.NewItem(ctx, mods...)
		m.AddItems(number, related).Apply(ctx, o)
	})
}

func (m userMods) WithoutItems() UserMod {
	return UserModFunc(func(ctx context.Context, o *UserTemplate) {
		o.r.Items = nil
	})
}

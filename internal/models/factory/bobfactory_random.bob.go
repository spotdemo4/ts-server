// Code generated by BobGen sql (devel). DO NOT EDIT.
// This file is meant to be re-generated in place and/or deleted at any time.

package factory

import (
	"math"
	"strconv"
	"strings"
	"time"

	"github.com/jaswdr/faker/v2"
)

var defaultFaker = faker.New()

func random___byte(f *faker.Faker, limits ...string) []byte {
	if f == nil {
		f = &defaultFaker
	}

	return []byte(random_string(f, limits...))
}

func random_bool(f *faker.Faker, limits ...string) bool {
	if f == nil {
		f = &defaultFaker
	}

	return f.Bool()
}

func random_float32(f *faker.Faker, limits ...string) float32 {
	if f == nil {
		f = &defaultFaker
	}

	var precision int64 = 5
	var scale int64 = 2

	if len(limits) > 0 {
		precision, _ = strconv.ParseInt(limits[0], 10, 32)
	}

	if len(limits) > 1 {
		scale, _ = strconv.ParseInt(limits[1], 10, 32)
	}

	scaleFloat := math.Pow10(int(scale))

	val := f.Float64(10, -1, 1) * math.Pow10(int(precision))
	val = math.Trunc(val) / scaleFloat

	return float32(val)
}

func random_int32(f *faker.Faker, limits ...string) int32 {
	if f == nil {
		f = &defaultFaker
	}

	return f.Int32()
}

func random_string(f *faker.Faker, limits ...string) string {
	if f == nil {
		f = &defaultFaker
	}

	val := strings.Join(f.Lorem().Words(f.IntBetween(1, 5)), " ")
	if len(limits) == 0 {
		return val
	}
	limitInt, _ := strconv.Atoi(limits[0])
	if limitInt > 0 && limitInt < len(val) {
		val = val[:limitInt]
	}
	return val
}

func random_time_Time(f *faker.Faker, limits ...string) time.Time {
	if f == nil {
		f = &defaultFaker
	}

	year := time.Hour * 24 * 365
	min := time.Now().Add(-year)
	max := time.Now().Add(year)
	return f.Time().TimeBetween(min, max)
}

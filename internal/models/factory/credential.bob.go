// Code generated by BobGen sql (devel). DO NOT EDIT.
// This file is meant to be re-generated in place and/or deleted at any time.

package factory

import (
	"context"
	"database/sql"
	"testing"
	"time"

	"github.com/spotdemo4/faker"
	models "github.com/spotdemo4/ts-server/internal/models"
	"github.com/stephenafamo/bob"
)

type CredentialMod interface {
	Apply(context.Context, *CredentialTemplate)
}

type CredentialModFunc func(context.Context, *CredentialTemplate)

func (f CredentialModFunc) Apply(ctx context.Context, n *CredentialTemplate) {
	f(ctx, n)
}

type CredentialModSlice []CredentialMod

func (mods CredentialModSlice) Apply(ctx context.Context, n *CredentialTemplate) {
	for _, f := range mods {
		f.Apply(ctx, n)
	}
}

// CredentialTemplate is an object representing the database table.
// all columns are optional and should be set by mods
type CredentialTemplate struct {
	CredID                func() string
	CredPublicKey         func() []byte
	SignCount             func() int32
	Transports            func() sql.Null[string]
	UserVerified          func() sql.Null[bool]
	BackupEligible        func() sql.Null[bool]
	BackupState           func() sql.Null[bool]
	AttestationObject     func() sql.Null[[]byte]
	AttestationClientData func() sql.Null[[]byte]
	CreatedAt             func() time.Time
	LastUsed              func() time.Time
	UserID                func() int32

	r credentialR
	f *Factory
}

type credentialR struct {
	User *credentialRUserR
}

type credentialRUserR struct {
	o *UserTemplate
}

// Apply mods to the CredentialTemplate
func (o *CredentialTemplate) Apply(ctx context.Context, mods ...CredentialMod) {
	for _, mod := range mods {
		mod.Apply(ctx, o)
	}
}

// setModelRels creates and sets the relationships on *models.Credential
// according to the relationships in the template. Nothing is inserted into the db
func (t CredentialTemplate) setModelRels(o *models.Credential) {
	if t.r.User != nil {
		rel := t.r.User.o.Build()
		rel.R.Credentials = append(rel.R.Credentials, o)
		o.UserID = rel.ID // h2
		o.R.User = rel
	}
}

// BuildSetter returns an *models.CredentialSetter
// this does nothing with the relationship templates
func (o CredentialTemplate) BuildSetter() *models.CredentialSetter {
	m := &models.CredentialSetter{}

	if o.CredID != nil {
		val := o.CredID()
		m.CredID = &val
	}
	if o.CredPublicKey != nil {
		val := o.CredPublicKey()
		m.CredPublicKey = &val
	}
	if o.SignCount != nil {
		val := o.SignCount()
		m.SignCount = &val
	}
	if o.Transports != nil {
		val := o.Transports()
		m.Transports = &val
	}
	if o.UserVerified != nil {
		val := o.UserVerified()
		m.UserVerified = &val
	}
	if o.BackupEligible != nil {
		val := o.BackupEligible()
		m.BackupEligible = &val
	}
	if o.BackupState != nil {
		val := o.BackupState()
		m.BackupState = &val
	}
	if o.AttestationObject != nil {
		val := o.AttestationObject()
		m.AttestationObject = &val
	}
	if o.AttestationClientData != nil {
		val := o.AttestationClientData()
		m.AttestationClientData = &val
	}
	if o.CreatedAt != nil {
		val := o.CreatedAt()
		m.CreatedAt = &val
	}
	if o.LastUsed != nil {
		val := o.LastUsed()
		m.LastUsed = &val
	}
	if o.UserID != nil {
		val := o.UserID()
		m.UserID = &val
	}

	return m
}

// BuildManySetter returns an []*models.CredentialSetter
// this does nothing with the relationship templates
func (o CredentialTemplate) BuildManySetter(number int) []*models.CredentialSetter {
	m := make([]*models.CredentialSetter, number)

	for i := range m {
		m[i] = o.BuildSetter()
	}

	return m
}

// Build returns an *models.Credential
// Related objects are also created and placed in the .R field
// NOTE: Objects are not inserted into the database. Use CredentialTemplate.Create
func (o CredentialTemplate) Build() *models.Credential {
	m := &models.Credential{}

	if o.CredID != nil {
		m.CredID = o.CredID()
	}
	if o.CredPublicKey != nil {
		m.CredPublicKey = o.CredPublicKey()
	}
	if o.SignCount != nil {
		m.SignCount = o.SignCount()
	}
	if o.Transports != nil {
		m.Transports = o.Transports()
	}
	if o.UserVerified != nil {
		m.UserVerified = o.UserVerified()
	}
	if o.BackupEligible != nil {
		m.BackupEligible = o.BackupEligible()
	}
	if o.BackupState != nil {
		m.BackupState = o.BackupState()
	}
	if o.AttestationObject != nil {
		m.AttestationObject = o.AttestationObject()
	}
	if o.AttestationClientData != nil {
		m.AttestationClientData = o.AttestationClientData()
	}
	if o.CreatedAt != nil {
		m.CreatedAt = o.CreatedAt()
	}
	if o.LastUsed != nil {
		m.LastUsed = o.LastUsed()
	}
	if o.UserID != nil {
		m.UserID = o.UserID()
	}

	o.setModelRels(m)

	return m
}

// BuildMany returns an models.CredentialSlice
// Related objects are also created and placed in the .R field
// NOTE: Objects are not inserted into the database. Use CredentialTemplate.CreateMany
func (o CredentialTemplate) BuildMany(number int) models.CredentialSlice {
	m := make(models.CredentialSlice, number)

	for i := range m {
		m[i] = o.Build()
	}

	return m
}

func ensureCreatableCredential(m *models.CredentialSetter) {
	if m.CredID == nil {
		val := random_string(nil)
		m.CredID = &val
	}
	if m.CredPublicKey == nil {
		val := random___byte(nil)
		m.CredPublicKey = &val
	}
	if m.SignCount == nil {
		val := random_int32(nil)
		m.SignCount = &val
	}
	if m.CreatedAt == nil {
		val := random_time_Time(nil)
		m.CreatedAt = &val
	}
	if m.LastUsed == nil {
		val := random_time_Time(nil)
		m.LastUsed = &val
	}
	if m.UserID == nil {
		val := random_int32(nil)
		m.UserID = &val
	}
}

// insertOptRels creates and inserts any optional the relationships on *models.Credential
// according to the relationships in the template.
// any required relationship should have already exist on the model
func (o *CredentialTemplate) insertOptRels(ctx context.Context, exec bob.Executor, m *models.Credential) (context.Context, error) {
	var err error

	return ctx, err
}

// Create builds a credential and inserts it into the database
// Relations objects are also inserted and placed in the .R field
func (o *CredentialTemplate) Create(ctx context.Context, exec bob.Executor) (*models.Credential, error) {
	_, m, err := o.create(ctx, exec)
	return m, err
}

// MustCreate builds a credential and inserts it into the database
// Relations objects are also inserted and placed in the .R field
// panics if an error occurs
func (o *CredentialTemplate) MustCreate(ctx context.Context, exec bob.Executor) *models.Credential {
	_, m, err := o.create(ctx, exec)
	if err != nil {
		panic(err)
	}
	return m
}

// CreateOrFail builds a credential and inserts it into the database
// Relations objects are also inserted and placed in the .R field
// It calls `tb.Fatal(err)` on the test/benchmark if an error occurs
func (o *CredentialTemplate) CreateOrFail(ctx context.Context, tb testing.TB, exec bob.Executor) *models.Credential {
	tb.Helper()
	_, m, err := o.create(ctx, exec)
	if err != nil {
		tb.Fatal(err)
		return nil
	}
	return m
}

// create builds a credential and inserts it into the database
// Relations objects are also inserted and placed in the .R field
// this returns a context that includes the newly inserted model
func (o *CredentialTemplate) create(ctx context.Context, exec bob.Executor) (context.Context, *models.Credential, error) {
	var err error
	opt := o.BuildSetter()
	ensureCreatableCredential(opt)

	if o.r.User == nil {
		CredentialMods.WithNewUser().Apply(ctx, o)
	}

	rel0, ok := userCtx.Value(ctx)
	if !ok {
		ctx, rel0, err = o.r.User.o.create(ctx, exec)
		if err != nil {
			return ctx, nil, err
		}
	}

	opt.UserID = &rel0.ID

	m, err := models.Credentials.Insert(opt).One(ctx, exec)
	if err != nil {
		return ctx, nil, err
	}
	ctx = credentialCtx.WithValue(ctx, m)

	m.R.User = rel0

	ctx, err = o.insertOptRels(ctx, exec, m)
	return ctx, m, err
}

// CreateMany builds multiple credentials and inserts them into the database
// Relations objects are also inserted and placed in the .R field
func (o CredentialTemplate) CreateMany(ctx context.Context, exec bob.Executor, number int) (models.CredentialSlice, error) {
	_, m, err := o.createMany(ctx, exec, number)
	return m, err
}

// MustCreateMany builds multiple credentials and inserts them into the database
// Relations objects are also inserted and placed in the .R field
// panics if an error occurs
func (o CredentialTemplate) MustCreateMany(ctx context.Context, exec bob.Executor, number int) models.CredentialSlice {
	_, m, err := o.createMany(ctx, exec, number)
	if err != nil {
		panic(err)
	}
	return m
}

// CreateManyOrFail builds multiple credentials and inserts them into the database
// Relations objects are also inserted and placed in the .R field
// It calls `tb.Fatal(err)` on the test/benchmark if an error occurs
func (o CredentialTemplate) CreateManyOrFail(ctx context.Context, tb testing.TB, exec bob.Executor, number int) models.CredentialSlice {
	tb.Helper()
	_, m, err := o.createMany(ctx, exec, number)
	if err != nil {
		tb.Fatal(err)
		return nil
	}
	return m
}

// createMany builds multiple credentials and inserts them into the database
// Relations objects are also inserted and placed in the .R field
// this returns a context that includes the newly inserted models
func (o CredentialTemplate) createMany(ctx context.Context, exec bob.Executor, number int) (context.Context, models.CredentialSlice, error) {
	var err error
	m := make(models.CredentialSlice, number)

	for i := range m {
		ctx, m[i], err = o.create(ctx, exec)
		if err != nil {
			return ctx, nil, err
		}
	}

	return ctx, m, nil
}

// Credential has methods that act as mods for the CredentialTemplate
var CredentialMods credentialMods

type credentialMods struct{}

func (m credentialMods) RandomizeAllColumns(f *faker.Faker) CredentialMod {
	return CredentialModSlice{
		CredentialMods.RandomCredID(f),
		CredentialMods.RandomCredPublicKey(f),
		CredentialMods.RandomSignCount(f),
		CredentialMods.RandomTransports(f),
		CredentialMods.RandomUserVerified(f),
		CredentialMods.RandomBackupEligible(f),
		CredentialMods.RandomBackupState(f),
		CredentialMods.RandomAttestationObject(f),
		CredentialMods.RandomAttestationClientData(f),
		CredentialMods.RandomCreatedAt(f),
		CredentialMods.RandomLastUsed(f),
		CredentialMods.RandomUserID(f),
	}
}

// Set the model columns to this value
func (m credentialMods) CredID(val string) CredentialMod {
	return CredentialModFunc(func(_ context.Context, o *CredentialTemplate) {
		o.CredID = func() string { return val }
	})
}

// Set the Column from the function
func (m credentialMods) CredIDFunc(f func() string) CredentialMod {
	return CredentialModFunc(func(_ context.Context, o *CredentialTemplate) {
		o.CredID = f
	})
}

// Clear any values for the column
func (m credentialMods) UnsetCredID() CredentialMod {
	return CredentialModFunc(func(_ context.Context, o *CredentialTemplate) {
		o.CredID = nil
	})
}

// Generates a random value for the column using the given faker
// if faker is nil, a default faker is used
func (m credentialMods) RandomCredID(f *faker.Faker) CredentialMod {
	return CredentialModFunc(func(_ context.Context, o *CredentialTemplate) {
		o.CredID = func() string {
			return random_string(f)
		}
	})
}

// Set the model columns to this value
func (m credentialMods) CredPublicKey(val []byte) CredentialMod {
	return CredentialModFunc(func(_ context.Context, o *CredentialTemplate) {
		o.CredPublicKey = func() []byte { return val }
	})
}

// Set the Column from the function
func (m credentialMods) CredPublicKeyFunc(f func() []byte) CredentialMod {
	return CredentialModFunc(func(_ context.Context, o *CredentialTemplate) {
		o.CredPublicKey = f
	})
}

// Clear any values for the column
func (m credentialMods) UnsetCredPublicKey() CredentialMod {
	return CredentialModFunc(func(_ context.Context, o *CredentialTemplate) {
		o.CredPublicKey = nil
	})
}

// Generates a random value for the column using the given faker
// if faker is nil, a default faker is used
func (m credentialMods) RandomCredPublicKey(f *faker.Faker) CredentialMod {
	return CredentialModFunc(func(_ context.Context, o *CredentialTemplate) {
		o.CredPublicKey = func() []byte {
			return random___byte(f)
		}
	})
}

// Set the model columns to this value
func (m credentialMods) SignCount(val int32) CredentialMod {
	return CredentialModFunc(func(_ context.Context, o *CredentialTemplate) {
		o.SignCount = func() int32 { return val }
	})
}

// Set the Column from the function
func (m credentialMods) SignCountFunc(f func() int32) CredentialMod {
	return CredentialModFunc(func(_ context.Context, o *CredentialTemplate) {
		o.SignCount = f
	})
}

// Clear any values for the column
func (m credentialMods) UnsetSignCount() CredentialMod {
	return CredentialModFunc(func(_ context.Context, o *CredentialTemplate) {
		o.SignCount = nil
	})
}

// Generates a random value for the column using the given faker
// if faker is nil, a default faker is used
func (m credentialMods) RandomSignCount(f *faker.Faker) CredentialMod {
	return CredentialModFunc(func(_ context.Context, o *CredentialTemplate) {
		o.SignCount = func() int32 {
			return random_int32(f)
		}
	})
}

// Set the model columns to this value
func (m credentialMods) Transports(val sql.Null[string]) CredentialMod {
	return CredentialModFunc(func(_ context.Context, o *CredentialTemplate) {
		o.Transports = func() sql.Null[string] { return val }
	})
}

// Set the Column from the function
func (m credentialMods) TransportsFunc(f func() sql.Null[string]) CredentialMod {
	return CredentialModFunc(func(_ context.Context, o *CredentialTemplate) {
		o.Transports = f
	})
}

// Clear any values for the column
func (m credentialMods) UnsetTransports() CredentialMod {
	return CredentialModFunc(func(_ context.Context, o *CredentialTemplate) {
		o.Transports = nil
	})
}

// Generates a random value for the column using the given faker
// if faker is nil, a default faker is used
// The generated value is sometimes null
func (m credentialMods) RandomTransports(f *faker.Faker) CredentialMod {
	return CredentialModFunc(func(_ context.Context, o *CredentialTemplate) {
		o.Transports = func() sql.Null[string] {
			if f == nil {
				f = &defaultFaker
			}

			val := random_string(f)
			return sql.Null[string]{V: val, Valid: f.Bool()}
		}
	})
}

// Generates a random value for the column using the given faker
// if faker is nil, a default faker is used
// The generated value is never null
func (m credentialMods) RandomTransportsNotNull(f *faker.Faker) CredentialMod {
	return CredentialModFunc(func(_ context.Context, o *CredentialTemplate) {
		o.Transports = func() sql.Null[string] {
			if f == nil {
				f = &defaultFaker
			}

			val := random_string(f)
			return sql.Null[string]{V: val, Valid: true}
		}
	})
}

// Set the model columns to this value
func (m credentialMods) UserVerified(val sql.Null[bool]) CredentialMod {
	return CredentialModFunc(func(_ context.Context, o *CredentialTemplate) {
		o.UserVerified = func() sql.Null[bool] { return val }
	})
}

// Set the Column from the function
func (m credentialMods) UserVerifiedFunc(f func() sql.Null[bool]) CredentialMod {
	return CredentialModFunc(func(_ context.Context, o *CredentialTemplate) {
		o.UserVerified = f
	})
}

// Clear any values for the column
func (m credentialMods) UnsetUserVerified() CredentialMod {
	return CredentialModFunc(func(_ context.Context, o *CredentialTemplate) {
		o.UserVerified = nil
	})
}

// Generates a random value for the column using the given faker
// if faker is nil, a default faker is used
// The generated value is sometimes null
func (m credentialMods) RandomUserVerified(f *faker.Faker) CredentialMod {
	return CredentialModFunc(func(_ context.Context, o *CredentialTemplate) {
		o.UserVerified = func() sql.Null[bool] {
			if f == nil {
				f = &defaultFaker
			}

			val := random_bool(f)
			return sql.Null[bool]{V: val, Valid: f.Bool()}
		}
	})
}

// Generates a random value for the column using the given faker
// if faker is nil, a default faker is used
// The generated value is never null
func (m credentialMods) RandomUserVerifiedNotNull(f *faker.Faker) CredentialMod {
	return CredentialModFunc(func(_ context.Context, o *CredentialTemplate) {
		o.UserVerified = func() sql.Null[bool] {
			if f == nil {
				f = &defaultFaker
			}

			val := random_bool(f)
			return sql.Null[bool]{V: val, Valid: true}
		}
	})
}

// Set the model columns to this value
func (m credentialMods) BackupEligible(val sql.Null[bool]) CredentialMod {
	return CredentialModFunc(func(_ context.Context, o *CredentialTemplate) {
		o.BackupEligible = func() sql.Null[bool] { return val }
	})
}

// Set the Column from the function
func (m credentialMods) BackupEligibleFunc(f func() sql.Null[bool]) CredentialMod {
	return CredentialModFunc(func(_ context.Context, o *CredentialTemplate) {
		o.BackupEligible = f
	})
}

// Clear any values for the column
func (m credentialMods) UnsetBackupEligible() CredentialMod {
	return CredentialModFunc(func(_ context.Context, o *CredentialTemplate) {
		o.BackupEligible = nil
	})
}

// Generates a random value for the column using the given faker
// if faker is nil, a default faker is used
// The generated value is sometimes null
func (m credentialMods) RandomBackupEligible(f *faker.Faker) CredentialMod {
	return CredentialModFunc(func(_ context.Context, o *CredentialTemplate) {
		o.BackupEligible = func() sql.Null[bool] {
			if f == nil {
				f = &defaultFaker
			}

			val := random_bool(f)
			return sql.Null[bool]{V: val, Valid: f.Bool()}
		}
	})
}

// Generates a random value for the column using the given faker
// if faker is nil, a default faker is used
// The generated value is never null
func (m credentialMods) RandomBackupEligibleNotNull(f *faker.Faker) CredentialMod {
	return CredentialModFunc(func(_ context.Context, o *CredentialTemplate) {
		o.BackupEligible = func() sql.Null[bool] {
			if f == nil {
				f = &defaultFaker
			}

			val := random_bool(f)
			return sql.Null[bool]{V: val, Valid: true}
		}
	})
}

// Set the model columns to this value
func (m credentialMods) BackupState(val sql.Null[bool]) CredentialMod {
	return CredentialModFunc(func(_ context.Context, o *CredentialTemplate) {
		o.BackupState = func() sql.Null[bool] { return val }
	})
}

// Set the Column from the function
func (m credentialMods) BackupStateFunc(f func() sql.Null[bool]) CredentialMod {
	return CredentialModFunc(func(_ context.Context, o *CredentialTemplate) {
		o.BackupState = f
	})
}

// Clear any values for the column
func (m credentialMods) UnsetBackupState() CredentialMod {
	return CredentialModFunc(func(_ context.Context, o *CredentialTemplate) {
		o.BackupState = nil
	})
}

// Generates a random value for the column using the given faker
// if faker is nil, a default faker is used
// The generated value is sometimes null
func (m credentialMods) RandomBackupState(f *faker.Faker) CredentialMod {
	return CredentialModFunc(func(_ context.Context, o *CredentialTemplate) {
		o.BackupState = func() sql.Null[bool] {
			if f == nil {
				f = &defaultFaker
			}

			val := random_bool(f)
			return sql.Null[bool]{V: val, Valid: f.Bool()}
		}
	})
}

// Generates a random value for the column using the given faker
// if faker is nil, a default faker is used
// The generated value is never null
func (m credentialMods) RandomBackupStateNotNull(f *faker.Faker) CredentialMod {
	return CredentialModFunc(func(_ context.Context, o *CredentialTemplate) {
		o.BackupState = func() sql.Null[bool] {
			if f == nil {
				f = &defaultFaker
			}

			val := random_bool(f)
			return sql.Null[bool]{V: val, Valid: true}
		}
	})
}

// Set the model columns to this value
func (m credentialMods) AttestationObject(val sql.Null[[]byte]) CredentialMod {
	return CredentialModFunc(func(_ context.Context, o *CredentialTemplate) {
		o.AttestationObject = func() sql.Null[[]byte] { return val }
	})
}

// Set the Column from the function
func (m credentialMods) AttestationObjectFunc(f func() sql.Null[[]byte]) CredentialMod {
	return CredentialModFunc(func(_ context.Context, o *CredentialTemplate) {
		o.AttestationObject = f
	})
}

// Clear any values for the column
func (m credentialMods) UnsetAttestationObject() CredentialMod {
	return CredentialModFunc(func(_ context.Context, o *CredentialTemplate) {
		o.AttestationObject = nil
	})
}

// Generates a random value for the column using the given faker
// if faker is nil, a default faker is used
// The generated value is sometimes null
func (m credentialMods) RandomAttestationObject(f *faker.Faker) CredentialMod {
	return CredentialModFunc(func(_ context.Context, o *CredentialTemplate) {
		o.AttestationObject = func() sql.Null[[]byte] {
			if f == nil {
				f = &defaultFaker
			}

			val := random___byte(f)
			return sql.Null[[]byte]{V: val, Valid: f.Bool()}
		}
	})
}

// Generates a random value for the column using the given faker
// if faker is nil, a default faker is used
// The generated value is never null
func (m credentialMods) RandomAttestationObjectNotNull(f *faker.Faker) CredentialMod {
	return CredentialModFunc(func(_ context.Context, o *CredentialTemplate) {
		o.AttestationObject = func() sql.Null[[]byte] {
			if f == nil {
				f = &defaultFaker
			}

			val := random___byte(f)
			return sql.Null[[]byte]{V: val, Valid: true}
		}
	})
}

// Set the model columns to this value
func (m credentialMods) AttestationClientData(val sql.Null[[]byte]) CredentialMod {
	return CredentialModFunc(func(_ context.Context, o *CredentialTemplate) {
		o.AttestationClientData = func() sql.Null[[]byte] { return val }
	})
}

// Set the Column from the function
func (m credentialMods) AttestationClientDataFunc(f func() sql.Null[[]byte]) CredentialMod {
	return CredentialModFunc(func(_ context.Context, o *CredentialTemplate) {
		o.AttestationClientData = f
	})
}

// Clear any values for the column
func (m credentialMods) UnsetAttestationClientData() CredentialMod {
	return CredentialModFunc(func(_ context.Context, o *CredentialTemplate) {
		o.AttestationClientData = nil
	})
}

// Generates a random value for the column using the given faker
// if faker is nil, a default faker is used
// The generated value is sometimes null
func (m credentialMods) RandomAttestationClientData(f *faker.Faker) CredentialMod {
	return CredentialModFunc(func(_ context.Context, o *CredentialTemplate) {
		o.AttestationClientData = func() sql.Null[[]byte] {
			if f == nil {
				f = &defaultFaker
			}

			val := random___byte(f)
			return sql.Null[[]byte]{V: val, Valid: f.Bool()}
		}
	})
}

// Generates a random value for the column using the given faker
// if faker is nil, a default faker is used
// The generated value is never null
func (m credentialMods) RandomAttestationClientDataNotNull(f *faker.Faker) CredentialMod {
	return CredentialModFunc(func(_ context.Context, o *CredentialTemplate) {
		o.AttestationClientData = func() sql.Null[[]byte] {
			if f == nil {
				f = &defaultFaker
			}

			val := random___byte(f)
			return sql.Null[[]byte]{V: val, Valid: true}
		}
	})
}

// Set the model columns to this value
func (m credentialMods) CreatedAt(val time.Time) CredentialMod {
	return CredentialModFunc(func(_ context.Context, o *CredentialTemplate) {
		o.CreatedAt = func() time.Time { return val }
	})
}

// Set the Column from the function
func (m credentialMods) CreatedAtFunc(f func() time.Time) CredentialMod {
	return CredentialModFunc(func(_ context.Context, o *CredentialTemplate) {
		o.CreatedAt = f
	})
}

// Clear any values for the column
func (m credentialMods) UnsetCreatedAt() CredentialMod {
	return CredentialModFunc(func(_ context.Context, o *CredentialTemplate) {
		o.CreatedAt = nil
	})
}

// Generates a random value for the column using the given faker
// if faker is nil, a default faker is used
func (m credentialMods) RandomCreatedAt(f *faker.Faker) CredentialMod {
	return CredentialModFunc(func(_ context.Context, o *CredentialTemplate) {
		o.CreatedAt = func() time.Time {
			return random_time_Time(f)
		}
	})
}

// Set the model columns to this value
func (m credentialMods) LastUsed(val time.Time) CredentialMod {
	return CredentialModFunc(func(_ context.Context, o *CredentialTemplate) {
		o.LastUsed = func() time.Time { return val }
	})
}

// Set the Column from the function
func (m credentialMods) LastUsedFunc(f func() time.Time) CredentialMod {
	return CredentialModFunc(func(_ context.Context, o *CredentialTemplate) {
		o.LastUsed = f
	})
}

// Clear any values for the column
func (m credentialMods) UnsetLastUsed() CredentialMod {
	return CredentialModFunc(func(_ context.Context, o *CredentialTemplate) {
		o.LastUsed = nil
	})
}

// Generates a random value for the column using the given faker
// if faker is nil, a default faker is used
func (m credentialMods) RandomLastUsed(f *faker.Faker) CredentialMod {
	return CredentialModFunc(func(_ context.Context, o *CredentialTemplate) {
		o.LastUsed = func() time.Time {
			return random_time_Time(f)
		}
	})
}

// Set the model columns to this value
func (m credentialMods) UserID(val int32) CredentialMod {
	return CredentialModFunc(func(_ context.Context, o *CredentialTemplate) {
		o.UserID = func() int32 { return val }
	})
}

// Set the Column from the function
func (m credentialMods) UserIDFunc(f func() int32) CredentialMod {
	return CredentialModFunc(func(_ context.Context, o *CredentialTemplate) {
		o.UserID = f
	})
}

// Clear any values for the column
func (m credentialMods) UnsetUserID() CredentialMod {
	return CredentialModFunc(func(_ context.Context, o *CredentialTemplate) {
		o.UserID = nil
	})
}

// Generates a random value for the column using the given faker
// if faker is nil, a default faker is used
func (m credentialMods) RandomUserID(f *faker.Faker) CredentialMod {
	return CredentialModFunc(func(_ context.Context, o *CredentialTemplate) {
		o.UserID = func() int32 {
			return random_int32(f)
		}
	})
}

func (m credentialMods) WithParentsCascading() CredentialMod {
	return CredentialModFunc(func(ctx context.Context, o *CredentialTemplate) {
		if isDone, _ := credentialWithParentsCascadingCtx.Value(ctx); isDone {
			return
		}
		ctx = credentialWithParentsCascadingCtx.WithValue(ctx, true)
		{

			related := o.f.NewUser(ctx, UserMods.WithParentsCascading())
			m.WithUser(related).Apply(ctx, o)
		}
	})
}

func (m credentialMods) WithUser(rel *UserTemplate) CredentialMod {
	return CredentialModFunc(func(ctx context.Context, o *CredentialTemplate) {
		o.r.User = &credentialRUserR{
			o: rel,
		}
	})
}

func (m credentialMods) WithNewUser(mods ...UserMod) CredentialMod {
	return CredentialModFunc(func(ctx context.Context, o *CredentialTemplate) {
		related := o.f.NewUser(ctx, mods...)

		m.WithUser(related).Apply(ctx, o)
	})
}

func (m credentialMods) WithoutUser() CredentialMod {
	return CredentialModFunc(func(ctx context.Context, o *CredentialTemplate) {
		o.r.User = nil
	})
}

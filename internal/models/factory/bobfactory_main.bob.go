// Code generated by BobGen sql (devel). DO NOT EDIT.
// This file is meant to be re-generated in place and/or deleted at any time.

package factory

import "context"

type Factory struct {
	baseCredentialMods      CredentialModSlice
	baseFileMods            FileModSlice
	baseItemMods            ItemModSlice
	baseSchemaMigrationMods SchemaMigrationModSlice
	baseUserMods            UserModSlice
}

func New() *Factory {
	return &Factory{}
}

func (f *Factory) NewCredential(ctx context.Context, mods ...CredentialMod) *CredentialTemplate {
	o := &CredentialTemplate{f: f}

	if f != nil {
		f.baseCredentialMods.Apply(ctx, o)
	}

	CredentialModSlice(mods).Apply(ctx, o)

	return o
}

func (f *Factory) NewFile(ctx context.Context, mods ...FileMod) *FileTemplate {
	o := &FileTemplate{f: f}

	if f != nil {
		f.baseFileMods.Apply(ctx, o)
	}

	FileModSlice(mods).Apply(ctx, o)

	return o
}

func (f *Factory) NewItem(ctx context.Context, mods ...ItemMod) *ItemTemplate {
	o := &ItemTemplate{f: f}

	if f != nil {
		f.baseItemMods.Apply(ctx, o)
	}

	ItemModSlice(mods).Apply(ctx, o)

	return o
}

func (f *Factory) NewSchemaMigration(ctx context.Context, mods ...SchemaMigrationMod) *SchemaMigrationTemplate {
	o := &SchemaMigrationTemplate{f: f}

	if f != nil {
		f.baseSchemaMigrationMods.Apply(ctx, o)
	}

	SchemaMigrationModSlice(mods).Apply(ctx, o)

	return o
}

func (f *Factory) NewUser(ctx context.Context, mods ...UserMod) *UserTemplate {
	o := &UserTemplate{f: f}

	if f != nil {
		f.baseUserMods.Apply(ctx, o)
	}

	UserModSlice(mods).Apply(ctx, o)

	return o
}

func (f *Factory) ClearBaseCredentialMods() {
	f.baseCredentialMods = nil
}

func (f *Factory) AddBaseCredentialMod(mods ...CredentialMod) {
	f.baseCredentialMods = append(f.baseCredentialMods, mods...)
}

func (f *Factory) ClearBaseFileMods() {
	f.baseFileMods = nil
}

func (f *Factory) AddBaseFileMod(mods ...FileMod) {
	f.baseFileMods = append(f.baseFileMods, mods...)
}

func (f *Factory) ClearBaseItemMods() {
	f.baseItemMods = nil
}

func (f *Factory) AddBaseItemMod(mods ...ItemMod) {
	f.baseItemMods = append(f.baseItemMods, mods...)
}

func (f *Factory) ClearBaseSchemaMigrationMods() {
	f.baseSchemaMigrationMods = nil
}

func (f *Factory) AddBaseSchemaMigrationMod(mods ...SchemaMigrationMod) {
	f.baseSchemaMigrationMods = append(f.baseSchemaMigrationMods, mods...)
}

func (f *Factory) ClearBaseUserMods() {
	f.baseUserMods = nil
}

func (f *Factory) AddBaseUserMod(mods ...UserMod) {
	f.baseUserMods = append(f.baseUserMods, mods...)
}

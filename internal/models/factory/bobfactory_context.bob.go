// Code generated by BobGen sql (devel). DO NOT EDIT.
// This file is meant to be re-generated in place and/or deleted at any time.

package factory

import (
	"context"

	models "github.com/spotdemo4/ts-server/internal/models"
)

type contextKey string

var (
	// Table context

	credentialCtx      = newContextual[*models.Credential]("credential")
	fileCtx            = newContextual[*models.File]("file")
	itemCtx            = newContextual[*models.Item]("item")
	schemaMigrationCtx = newContextual[*models.SchemaMigration]("schemaMigration")
	userCtx            = newContextual[*models.User]("user")

	// Relationship Contexts for credential
	credentialWithParentsCascadingCtx = newContextual[bool]("credentialWithParentsCascading")
	credentialRelUserCtx              = newContextual[bool]("credential.user.fk_credential_0")

	// Relationship Contexts for file
	fileWithParentsCascadingCtx   = newContextual[bool]("fileWithParentsCascading")
	fileRelUserCtx                = newContextual[bool]("file.user.fk_file_0")
	fileRelProfilePictureUsersCtx = newContextual[bool]("file.user.fk_user_0")

	// Relationship Contexts for item
	itemWithParentsCascadingCtx = newContextual[bool]("itemWithParentsCascading")
	itemRelUserCtx              = newContextual[bool]("item.user.fk_item_0")

	// Relationship Contexts for schema_migrations
	schemaMigrationWithParentsCascadingCtx = newContextual[bool]("schemaMigrationWithParentsCascading")

	// Relationship Contexts for user
	userWithParentsCascadingCtx  = newContextual[bool]("userWithParentsCascading")
	userRelCredentialsCtx        = newContextual[bool]("credential.user.fk_credential_0")
	userRelFilesCtx              = newContextual[bool]("file.user.fk_file_0")
	userRelItemsCtx              = newContextual[bool]("item.user.fk_item_0")
	userRelProfilePictureFileCtx = newContextual[bool]("file.user.fk_user_0")
)

// Contextual is a convienience wrapper around context.WithValue and context.Value
type contextual[V any] struct {
	key contextKey
}

func newContextual[V any](key string) contextual[V] {
	return contextual[V]{key: contextKey(key)}
}

func (k contextual[V]) WithValue(ctx context.Context, val V) context.Context {
	return context.WithValue(ctx, k.key, val)
}

func (k contextual[V]) Value(ctx context.Context) (V, bool) {
	v, ok := ctx.Value(k.key).(V)
	return v, ok
}

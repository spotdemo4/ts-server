// Code generated by BobGen sql (devel). DO NOT EDIT.
// This file is meant to be re-generated in place and/or deleted at any time.

package models

import (
	"context"
	"database/sql"
	"fmt"
	"io"
	"time"

	"github.com/stephenafamo/bob"
	"github.com/stephenafamo/bob/dialect/sqlite"
	"github.com/stephenafamo/bob/dialect/sqlite/dialect"
	"github.com/stephenafamo/bob/dialect/sqlite/dm"
	"github.com/stephenafamo/bob/dialect/sqlite/sm"
	"github.com/stephenafamo/bob/dialect/sqlite/um"
	"github.com/stephenafamo/bob/expr"
	"github.com/stephenafamo/bob/mods"
	"github.com/stephenafamo/bob/orm"
)

// Credential is an object representing the database table.
type Credential struct {
	CredID                string           `db:"cred_id,pk" `
	CredPublicKey         []byte           `db:"cred_public_key" `
	SignCount             int32            `db:"sign_count" `
	Transports            sql.Null[string] `db:"transports" `
	UserVerified          sql.Null[bool]   `db:"user_verified" `
	BackupEligible        sql.Null[bool]   `db:"backup_eligible" `
	BackupState           sql.Null[bool]   `db:"backup_state" `
	AttestationObject     sql.Null[[]byte] `db:"attestation_object" `
	AttestationClientData sql.Null[[]byte] `db:"attestation_client_data" `
	CreatedAt             time.Time        `db:"created_at" `
	LastUsed              time.Time        `db:"last_used" `
	UserID                int32            `db:"user_id" `

	R credentialR `db:"-" `
}

// CredentialSlice is an alias for a slice of pointers to Credential.
// This should almost always be used instead of []*Credential.
type CredentialSlice []*Credential

// Credentials contains methods to work with the credential table
var Credentials = sqlite.NewTablex[*Credential, CredentialSlice, *CredentialSetter]("", "credential")

// CredentialsQuery is a query on the credential table
type CredentialsQuery = *sqlite.ViewQuery[*Credential, CredentialSlice]

// credentialR is where relationships are stored.
type credentialR struct {
	User *User // fk_credential_0
}

type credentialColumnNames struct {
	CredID                string
	CredPublicKey         string
	SignCount             string
	Transports            string
	UserVerified          string
	BackupEligible        string
	BackupState           string
	AttestationObject     string
	AttestationClientData string
	CreatedAt             string
	LastUsed              string
	UserID                string
}

var CredentialColumns = buildCredentialColumns("credential")

type credentialColumns struct {
	tableAlias            string
	CredID                sqlite.Expression
	CredPublicKey         sqlite.Expression
	SignCount             sqlite.Expression
	Transports            sqlite.Expression
	UserVerified          sqlite.Expression
	BackupEligible        sqlite.Expression
	BackupState           sqlite.Expression
	AttestationObject     sqlite.Expression
	AttestationClientData sqlite.Expression
	CreatedAt             sqlite.Expression
	LastUsed              sqlite.Expression
	UserID                sqlite.Expression
}

func (c credentialColumns) Alias() string {
	return c.tableAlias
}

func (credentialColumns) AliasedAs(alias string) credentialColumns {
	return buildCredentialColumns(alias)
}

func buildCredentialColumns(alias string) credentialColumns {
	return credentialColumns{
		tableAlias:            alias,
		CredID:                sqlite.Quote(alias, "cred_id"),
		CredPublicKey:         sqlite.Quote(alias, "cred_public_key"),
		SignCount:             sqlite.Quote(alias, "sign_count"),
		Transports:            sqlite.Quote(alias, "transports"),
		UserVerified:          sqlite.Quote(alias, "user_verified"),
		BackupEligible:        sqlite.Quote(alias, "backup_eligible"),
		BackupState:           sqlite.Quote(alias, "backup_state"),
		AttestationObject:     sqlite.Quote(alias, "attestation_object"),
		AttestationClientData: sqlite.Quote(alias, "attestation_client_data"),
		CreatedAt:             sqlite.Quote(alias, "created_at"),
		LastUsed:              sqlite.Quote(alias, "last_used"),
		UserID:                sqlite.Quote(alias, "user_id"),
	}
}

type credentialWhere[Q sqlite.Filterable] struct {
	CredID                sqlite.WhereMod[Q, string]
	CredPublicKey         sqlite.WhereMod[Q, []byte]
	SignCount             sqlite.WhereMod[Q, int32]
	Transports            sqlite.WhereNullMod[Q, string]
	UserVerified          sqlite.WhereNullMod[Q, bool]
	BackupEligible        sqlite.WhereNullMod[Q, bool]
	BackupState           sqlite.WhereNullMod[Q, bool]
	AttestationObject     sqlite.WhereNullMod[Q, []byte]
	AttestationClientData sqlite.WhereNullMod[Q, []byte]
	CreatedAt             sqlite.WhereMod[Q, time.Time]
	LastUsed              sqlite.WhereMod[Q, time.Time]
	UserID                sqlite.WhereMod[Q, int32]
}

func (credentialWhere[Q]) AliasedAs(alias string) credentialWhere[Q] {
	return buildCredentialWhere[Q](buildCredentialColumns(alias))
}

func buildCredentialWhere[Q sqlite.Filterable](cols credentialColumns) credentialWhere[Q] {
	return credentialWhere[Q]{
		CredID:                sqlite.Where[Q, string](cols.CredID),
		CredPublicKey:         sqlite.Where[Q, []byte](cols.CredPublicKey),
		SignCount:             sqlite.Where[Q, int32](cols.SignCount),
		Transports:            sqlite.WhereNull[Q, string](cols.Transports),
		UserVerified:          sqlite.WhereNull[Q, bool](cols.UserVerified),
		BackupEligible:        sqlite.WhereNull[Q, bool](cols.BackupEligible),
		BackupState:           sqlite.WhereNull[Q, bool](cols.BackupState),
		AttestationObject:     sqlite.WhereNull[Q, []byte](cols.AttestationObject),
		AttestationClientData: sqlite.WhereNull[Q, []byte](cols.AttestationClientData),
		CreatedAt:             sqlite.Where[Q, time.Time](cols.CreatedAt),
		LastUsed:              sqlite.Where[Q, time.Time](cols.LastUsed),
		UserID:                sqlite.Where[Q, int32](cols.UserID),
	}
}

var CredentialErrors = &credentialErrors{
	ErrUniquePkMainCredential: &UniqueConstraintError{
		schema:  "",
		table:   "credential",
		columns: []string{"cred_id"},
		s:       "pk_main_credential",
	},
}

type credentialErrors struct {
	ErrUniquePkMainCredential *UniqueConstraintError
}

// CredentialSetter is used for insert/upsert/update operations
// All values are optional, and do not have to be set
// Generated columns are not included
type CredentialSetter struct {
	CredID                *string           `db:"cred_id,pk" `
	CredPublicKey         *[]byte           `db:"cred_public_key" `
	SignCount             *int32            `db:"sign_count" `
	Transports            *sql.Null[string] `db:"transports" `
	UserVerified          *sql.Null[bool]   `db:"user_verified" `
	BackupEligible        *sql.Null[bool]   `db:"backup_eligible" `
	BackupState           *sql.Null[bool]   `db:"backup_state" `
	AttestationObject     *sql.Null[[]byte] `db:"attestation_object" `
	AttestationClientData *sql.Null[[]byte] `db:"attestation_client_data" `
	CreatedAt             *time.Time        `db:"created_at" `
	LastUsed              *time.Time        `db:"last_used" `
	UserID                *int32            `db:"user_id" `
}

func (s CredentialSetter) SetColumns() []string {
	vals := make([]string, 0, 12)
	if s.CredID != nil {
		vals = append(vals, "cred_id")
	}

	if s.CredPublicKey != nil {
		vals = append(vals, "cred_public_key")
	}

	if s.SignCount != nil {
		vals = append(vals, "sign_count")
	}

	if s.Transports != nil {
		vals = append(vals, "transports")
	}

	if s.UserVerified != nil {
		vals = append(vals, "user_verified")
	}

	if s.BackupEligible != nil {
		vals = append(vals, "backup_eligible")
	}

	if s.BackupState != nil {
		vals = append(vals, "backup_state")
	}

	if s.AttestationObject != nil {
		vals = append(vals, "attestation_object")
	}

	if s.AttestationClientData != nil {
		vals = append(vals, "attestation_client_data")
	}

	if s.CreatedAt != nil {
		vals = append(vals, "created_at")
	}

	if s.LastUsed != nil {
		vals = append(vals, "last_used")
	}

	if s.UserID != nil {
		vals = append(vals, "user_id")
	}

	return vals
}

func (s CredentialSetter) Overwrite(t *Credential) {
	if s.CredID != nil {
		t.CredID = *s.CredID
	}
	if s.CredPublicKey != nil {
		t.CredPublicKey = *s.CredPublicKey
	}
	if s.SignCount != nil {
		t.SignCount = *s.SignCount
	}
	if s.Transports != nil {
		t.Transports = *s.Transports
	}
	if s.UserVerified != nil {
		t.UserVerified = *s.UserVerified
	}
	if s.BackupEligible != nil {
		t.BackupEligible = *s.BackupEligible
	}
	if s.BackupState != nil {
		t.BackupState = *s.BackupState
	}
	if s.AttestationObject != nil {
		t.AttestationObject = *s.AttestationObject
	}
	if s.AttestationClientData != nil {
		t.AttestationClientData = *s.AttestationClientData
	}
	if s.CreatedAt != nil {
		t.CreatedAt = *s.CreatedAt
	}
	if s.LastUsed != nil {
		t.LastUsed = *s.LastUsed
	}
	if s.UserID != nil {
		t.UserID = *s.UserID
	}
}

func (s *CredentialSetter) Apply(q *dialect.InsertQuery) {
	q.AppendHooks(func(ctx context.Context, exec bob.Executor) (context.Context, error) {
		return Credentials.BeforeInsertHooks.RunHooks(ctx, exec, s)
	})

	if len(q.TableRef.Columns) == 0 {
		q.TableRef.Columns = s.SetColumns()
		if len(q.TableRef.Columns) == 0 {
			q.TableRef.Columns = []string{"cred_id"}
		}

	}

	q.AppendValues(bob.ExpressionFunc(func(ctx context.Context, w io.Writer, d bob.Dialect, start int) ([]any, error) {
		vals := make([]bob.Expression, 0, 12)
		if s.CredID != nil {
			vals = append(vals, sqlite.Arg(s.CredID))
		}

		if s.CredPublicKey != nil {
			vals = append(vals, sqlite.Arg(s.CredPublicKey))
		}

		if s.SignCount != nil {
			vals = append(vals, sqlite.Arg(s.SignCount))
		}

		if s.Transports != nil {
			vals = append(vals, sqlite.Arg(s.Transports))
		}

		if s.UserVerified != nil {
			vals = append(vals, sqlite.Arg(s.UserVerified))
		}

		if s.BackupEligible != nil {
			vals = append(vals, sqlite.Arg(s.BackupEligible))
		}

		if s.BackupState != nil {
			vals = append(vals, sqlite.Arg(s.BackupState))
		}

		if s.AttestationObject != nil {
			vals = append(vals, sqlite.Arg(s.AttestationObject))
		}

		if s.AttestationClientData != nil {
			vals = append(vals, sqlite.Arg(s.AttestationClientData))
		}

		if s.CreatedAt != nil {
			vals = append(vals, sqlite.Arg(s.CreatedAt))
		}

		if s.LastUsed != nil {
			vals = append(vals, sqlite.Arg(s.LastUsed))
		}

		if s.UserID != nil {
			vals = append(vals, sqlite.Arg(s.UserID))
		}

		if len(vals) == 0 {
			vals = append(vals, sqlite.Arg(nil))
		}

		return bob.ExpressSlice(ctx, w, d, start, vals, "", ", ", "")
	}))
}

func (s CredentialSetter) UpdateMod() bob.Mod[*dialect.UpdateQuery] {
	return um.Set(s.Expressions()...)
}

func (s CredentialSetter) Expressions(prefix ...string) []bob.Expression {
	exprs := make([]bob.Expression, 0, 12)

	if s.CredID != nil {
		exprs = append(exprs, expr.Join{Sep: " = ", Exprs: []bob.Expression{
			sqlite.Quote(append(prefix, "cred_id")...),
			sqlite.Arg(s.CredID),
		}})
	}

	if s.CredPublicKey != nil {
		exprs = append(exprs, expr.Join{Sep: " = ", Exprs: []bob.Expression{
			sqlite.Quote(append(prefix, "cred_public_key")...),
			sqlite.Arg(s.CredPublicKey),
		}})
	}

	if s.SignCount != nil {
		exprs = append(exprs, expr.Join{Sep: " = ", Exprs: []bob.Expression{
			sqlite.Quote(append(prefix, "sign_count")...),
			sqlite.Arg(s.SignCount),
		}})
	}

	if s.Transports != nil {
		exprs = append(exprs, expr.Join{Sep: " = ", Exprs: []bob.Expression{
			sqlite.Quote(append(prefix, "transports")...),
			sqlite.Arg(s.Transports),
		}})
	}

	if s.UserVerified != nil {
		exprs = append(exprs, expr.Join{Sep: " = ", Exprs: []bob.Expression{
			sqlite.Quote(append(prefix, "user_verified")...),
			sqlite.Arg(s.UserVerified),
		}})
	}

	if s.BackupEligible != nil {
		exprs = append(exprs, expr.Join{Sep: " = ", Exprs: []bob.Expression{
			sqlite.Quote(append(prefix, "backup_eligible")...),
			sqlite.Arg(s.BackupEligible),
		}})
	}

	if s.BackupState != nil {
		exprs = append(exprs, expr.Join{Sep: " = ", Exprs: []bob.Expression{
			sqlite.Quote(append(prefix, "backup_state")...),
			sqlite.Arg(s.BackupState),
		}})
	}

	if s.AttestationObject != nil {
		exprs = append(exprs, expr.Join{Sep: " = ", Exprs: []bob.Expression{
			sqlite.Quote(append(prefix, "attestation_object")...),
			sqlite.Arg(s.AttestationObject),
		}})
	}

	if s.AttestationClientData != nil {
		exprs = append(exprs, expr.Join{Sep: " = ", Exprs: []bob.Expression{
			sqlite.Quote(append(prefix, "attestation_client_data")...),
			sqlite.Arg(s.AttestationClientData),
		}})
	}

	if s.CreatedAt != nil {
		exprs = append(exprs, expr.Join{Sep: " = ", Exprs: []bob.Expression{
			sqlite.Quote(append(prefix, "created_at")...),
			sqlite.Arg(s.CreatedAt),
		}})
	}

	if s.LastUsed != nil {
		exprs = append(exprs, expr.Join{Sep: " = ", Exprs: []bob.Expression{
			sqlite.Quote(append(prefix, "last_used")...),
			sqlite.Arg(s.LastUsed),
		}})
	}

	if s.UserID != nil {
		exprs = append(exprs, expr.Join{Sep: " = ", Exprs: []bob.Expression{
			sqlite.Quote(append(prefix, "user_id")...),
			sqlite.Arg(s.UserID),
		}})
	}

	return exprs
}

// FindCredential retrieves a single record by primary key
// If cols is empty Find will return all columns.
func FindCredential(ctx context.Context, exec bob.Executor, CredIDPK string, cols ...string) (*Credential, error) {
	if len(cols) == 0 {
		return Credentials.Query(
			SelectWhere.Credentials.CredID.EQ(CredIDPK),
		).One(ctx, exec)
	}

	return Credentials.Query(
		SelectWhere.Credentials.CredID.EQ(CredIDPK),
		sm.Columns(Credentials.Columns().Only(cols...)),
	).One(ctx, exec)
}

// CredentialExists checks the presence of a single record by primary key
func CredentialExists(ctx context.Context, exec bob.Executor, CredIDPK string) (bool, error) {
	return Credentials.Query(
		SelectWhere.Credentials.CredID.EQ(CredIDPK),
	).Exists(ctx, exec)
}

// AfterQueryHook is called after Credential is retrieved from the database
func (o *Credential) AfterQueryHook(ctx context.Context, exec bob.Executor, queryType bob.QueryType) error {
	var err error

	switch queryType {
	case bob.QueryTypeSelect:
		ctx, err = Credentials.AfterSelectHooks.RunHooks(ctx, exec, CredentialSlice{o})
	case bob.QueryTypeInsert:
		ctx, err = Credentials.AfterInsertHooks.RunHooks(ctx, exec, CredentialSlice{o})
	case bob.QueryTypeUpdate:
		ctx, err = Credentials.AfterUpdateHooks.RunHooks(ctx, exec, CredentialSlice{o})
	case bob.QueryTypeDelete:
		ctx, err = Credentials.AfterDeleteHooks.RunHooks(ctx, exec, CredentialSlice{o})
	}

	return err
}

// primaryKeyVals returns the primary key values of the Credential
func (o *Credential) primaryKeyVals() bob.Expression {
	return sqlite.Arg(o.CredID)
}

func (o *Credential) pkEQ() dialect.Expression {
	return sqlite.Quote("credential", "cred_id").EQ(bob.ExpressionFunc(func(ctx context.Context, w io.Writer, d bob.Dialect, start int) ([]any, error) {
		return o.primaryKeyVals().WriteSQL(ctx, w, d, start)
	}))
}

// Update uses an executor to update the Credential
func (o *Credential) Update(ctx context.Context, exec bob.Executor, s *CredentialSetter) error {
	v, err := Credentials.Update(s.UpdateMod(), um.Where(o.pkEQ())).One(ctx, exec)
	if err != nil {
		return err
	}

	o.R = v.R
	*o = *v

	return nil
}

// Delete deletes a single Credential record with an executor
func (o *Credential) Delete(ctx context.Context, exec bob.Executor) error {
	_, err := Credentials.Delete(dm.Where(o.pkEQ())).Exec(ctx, exec)
	return err
}

// Reload refreshes the Credential using the executor
func (o *Credential) Reload(ctx context.Context, exec bob.Executor) error {
	o2, err := Credentials.Query(
		SelectWhere.Credentials.CredID.EQ(o.CredID),
	).One(ctx, exec)
	if err != nil {
		return err
	}
	o2.R = o.R
	*o = *o2

	return nil
}

// AfterQueryHook is called after CredentialSlice is retrieved from the database
func (o CredentialSlice) AfterQueryHook(ctx context.Context, exec bob.Executor, queryType bob.QueryType) error {
	var err error

	switch queryType {
	case bob.QueryTypeSelect:
		ctx, err = Credentials.AfterSelectHooks.RunHooks(ctx, exec, o)
	case bob.QueryTypeInsert:
		ctx, err = Credentials.AfterInsertHooks.RunHooks(ctx, exec, o)
	case bob.QueryTypeUpdate:
		ctx, err = Credentials.AfterUpdateHooks.RunHooks(ctx, exec, o)
	case bob.QueryTypeDelete:
		ctx, err = Credentials.AfterDeleteHooks.RunHooks(ctx, exec, o)
	}

	return err
}

func (o CredentialSlice) pkIN() dialect.Expression {
	if len(o) == 0 {
		return sqlite.Raw("NULL")
	}

	return sqlite.Quote("credential", "cred_id").In(bob.ExpressionFunc(func(ctx context.Context, w io.Writer, d bob.Dialect, start int) ([]any, error) {
		pkPairs := make([]bob.Expression, len(o))
		for i, row := range o {
			pkPairs[i] = row.primaryKeyVals()
		}
		return bob.ExpressSlice(ctx, w, d, start, pkPairs, "", ", ", "")
	}))
}

// copyMatchingRows finds models in the given slice that have the same primary key
// then it first copies the existing relationships from the old model to the new model
// and then replaces the old model in the slice with the new model
func (o CredentialSlice) copyMatchingRows(from ...*Credential) {
	for i, old := range o {
		for _, new := range from {
			if new.CredID != old.CredID {
				continue
			}
			new.R = old.R
			o[i] = new
			break
		}
	}
}

// UpdateMod modifies an update query with "WHERE primary_key IN (o...)"
func (o CredentialSlice) UpdateMod() bob.Mod[*dialect.UpdateQuery] {
	return bob.ModFunc[*dialect.UpdateQuery](func(q *dialect.UpdateQuery) {
		q.AppendHooks(func(ctx context.Context, exec bob.Executor) (context.Context, error) {
			return Credentials.BeforeUpdateHooks.RunHooks(ctx, exec, o)
		})

		q.AppendLoader(bob.LoaderFunc(func(ctx context.Context, exec bob.Executor, retrieved any) error {
			var err error
			switch retrieved := retrieved.(type) {
			case *Credential:
				o.copyMatchingRows(retrieved)
			case []*Credential:
				o.copyMatchingRows(retrieved...)
			case CredentialSlice:
				o.copyMatchingRows(retrieved...)
			default:
				// If the retrieved value is not a Credential or a slice of Credential
				// then run the AfterUpdateHooks on the slice
				_, err = Credentials.AfterUpdateHooks.RunHooks(ctx, exec, o)
			}

			return err
		}))

		q.AppendWhere(o.pkIN())
	})
}

// DeleteMod modifies an delete query with "WHERE primary_key IN (o...)"
func (o CredentialSlice) DeleteMod() bob.Mod[*dialect.DeleteQuery] {
	return bob.ModFunc[*dialect.DeleteQuery](func(q *dialect.DeleteQuery) {
		q.AppendHooks(func(ctx context.Context, exec bob.Executor) (context.Context, error) {
			return Credentials.BeforeDeleteHooks.RunHooks(ctx, exec, o)
		})

		q.AppendLoader(bob.LoaderFunc(func(ctx context.Context, exec bob.Executor, retrieved any) error {
			var err error
			switch retrieved := retrieved.(type) {
			case *Credential:
				o.copyMatchingRows(retrieved)
			case []*Credential:
				o.copyMatchingRows(retrieved...)
			case CredentialSlice:
				o.copyMatchingRows(retrieved...)
			default:
				// If the retrieved value is not a Credential or a slice of Credential
				// then run the AfterDeleteHooks on the slice
				_, err = Credentials.AfterDeleteHooks.RunHooks(ctx, exec, o)
			}

			return err
		}))

		q.AppendWhere(o.pkIN())
	})
}

func (o CredentialSlice) UpdateAll(ctx context.Context, exec bob.Executor, vals CredentialSetter) error {
	if len(o) == 0 {
		return nil
	}

	_, err := Credentials.Update(vals.UpdateMod(), o.UpdateMod()).All(ctx, exec)
	return err
}

func (o CredentialSlice) DeleteAll(ctx context.Context, exec bob.Executor) error {
	if len(o) == 0 {
		return nil
	}

	_, err := Credentials.Delete(o.DeleteMod()).Exec(ctx, exec)
	return err
}

func (o CredentialSlice) ReloadAll(ctx context.Context, exec bob.Executor) error {
	if len(o) == 0 {
		return nil
	}

	o2, err := Credentials.Query(sm.Where(o.pkIN())).All(ctx, exec)
	if err != nil {
		return err
	}

	o.copyMatchingRows(o2...)

	return nil
}

type credentialJoins[Q dialect.Joinable] struct {
	typ  string
	User modAs[Q, userColumns]
}

func (j credentialJoins[Q]) aliasedAs(alias string) credentialJoins[Q] {
	return buildCredentialJoins[Q](buildCredentialColumns(alias), j.typ)
}

func buildCredentialJoins[Q dialect.Joinable](cols credentialColumns, typ string) credentialJoins[Q] {
	return credentialJoins[Q]{
		typ: typ,
		User: modAs[Q, userColumns]{
			c: UserColumns,
			f: func(to userColumns) bob.Mod[Q] {
				mods := make(mods.QueryMods[Q], 0, 1)

				{
					mods = append(mods, dialect.Join[Q](typ, Users.Name().As(to.Alias())).On(
						to.ID.EQ(cols.UserID),
					))
				}

				return mods
			},
		},
	}
}

// User starts a query for related objects on user
func (o *Credential) User(mods ...bob.Mod[*dialect.SelectQuery]) UsersQuery {
	return Users.Query(append(mods,
		sm.Where(UserColumns.ID.EQ(sqlite.Arg(o.UserID))),
	)...)
}

func (os CredentialSlice) User(mods ...bob.Mod[*dialect.SelectQuery]) UsersQuery {
	PKArgSlice := make([]bob.Expression, len(os))
	for i, o := range os {
		PKArgSlice[i] = sqlite.ArgGroup(o.UserID)
	}
	PKArgExpr := sqlite.Group(PKArgSlice...)

	return Users.Query(append(mods,
		sm.Where(sqlite.Group(UserColumns.ID).OP("IN", PKArgExpr)),
	)...)
}

func (o *Credential) Preload(name string, retrieved any) error {
	if o == nil {
		return nil
	}

	switch name {
	case "User":
		rel, ok := retrieved.(*User)
		if !ok {
			return fmt.Errorf("credential cannot load %T as %q", retrieved, name)
		}

		o.R.User = rel

		if rel != nil {
			rel.R.Credentials = CredentialSlice{o}
		}
		return nil
	default:
		return fmt.Errorf("credential has no relationship %q", name)
	}
}

type credentialPreloader struct {
	User func(...sqlite.PreloadOption) sqlite.Preloader
}

func buildCredentialPreloader() credentialPreloader {
	return credentialPreloader{
		User: func(opts ...sqlite.PreloadOption) sqlite.Preloader {
			return sqlite.Preload[*User, UserSlice](orm.Relationship{
				Name: "User",
				Sides: []orm.RelSide{
					{
						From: TableNames.Credentials,
						To:   TableNames.Users,
						FromColumns: []string{
							ColumnNames.Credentials.UserID,
						},
						ToColumns: []string{
							ColumnNames.Users.ID,
						},
					},
				},
			}, Users.Columns().Names(), opts...)
		},
	}
}

type credentialThenLoader[Q orm.Loadable] struct {
	User func(...bob.Mod[*dialect.SelectQuery]) orm.Loader[Q]
}

func buildCredentialThenLoader[Q orm.Loadable]() credentialThenLoader[Q] {
	type UserLoadInterface interface {
		LoadUser(context.Context, bob.Executor, ...bob.Mod[*dialect.SelectQuery]) error
	}

	return credentialThenLoader[Q]{
		User: thenLoadBuilder[Q](
			"User",
			func(ctx context.Context, exec bob.Executor, retrieved UserLoadInterface, mods ...bob.Mod[*dialect.SelectQuery]) error {
				return retrieved.LoadUser(ctx, exec, mods...)
			},
		),
	}
}

// LoadUser loads the credential's User into the .R struct
func (o *Credential) LoadUser(ctx context.Context, exec bob.Executor, mods ...bob.Mod[*dialect.SelectQuery]) error {
	if o == nil {
		return nil
	}

	// Reset the relationship
	o.R.User = nil

	related, err := o.User(mods...).One(ctx, exec)
	if err != nil {
		return err
	}

	related.R.Credentials = CredentialSlice{o}

	o.R.User = related
	return nil
}

// LoadUser loads the credential's User into the .R struct
func (os CredentialSlice) LoadUser(ctx context.Context, exec bob.Executor, mods ...bob.Mod[*dialect.SelectQuery]) error {
	if len(os) == 0 {
		return nil
	}

	users, err := os.User(mods...).All(ctx, exec)
	if err != nil {
		return err
	}

	for _, o := range os {
		for _, rel := range users {
			if o.UserID != rel.ID {
				continue
			}

			rel.R.Credentials = append(rel.R.Credentials, o)

			o.R.User = rel
			break
		}
	}

	return nil
}

func attachCredentialUser0(ctx context.Context, exec bob.Executor, count int, credential0 *Credential, user1 *User) (*Credential, error) {
	setter := &CredentialSetter{
		UserID: &user1.ID,
	}

	err := credential0.Update(ctx, exec, setter)
	if err != nil {
		return nil, fmt.Errorf("attachCredentialUser0: %w", err)
	}

	return credential0, nil
}

func (credential0 *Credential) InsertUser(ctx context.Context, exec bob.Executor, related *UserSetter) error {
	user1, err := Users.Insert(related).One(ctx, exec)
	if err != nil {
		return fmt.Errorf("inserting related objects: %w", err)
	}

	_, err = attachCredentialUser0(ctx, exec, 1, credential0, user1)
	if err != nil {
		return err
	}

	credential0.R.User = user1

	user1.R.Credentials = append(user1.R.Credentials, credential0)

	return nil
}

func (credential0 *Credential) AttachUser(ctx context.Context, exec bob.Executor, user1 *User) error {
	var err error

	_, err = attachCredentialUser0(ctx, exec, 1, credential0, user1)
	if err != nil {
		return err
	}

	credential0.R.User = user1

	user1.R.Credentials = append(user1.R.Credentials, credential0)

	return nil
}

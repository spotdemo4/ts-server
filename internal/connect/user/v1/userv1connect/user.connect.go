// Code generated by protoc-gen-connect-go. DO NOT EDIT.
//
// Source: user/v1/user.proto

package userv1connect

import (
	connect "connectrpc.com/connect"
	context "context"
	errors "errors"
	v1 "github.com/spotdemo4/ts-server/internal/connect/user/v1"
	http "net/http"
	strings "strings"
)

// This is a compile-time assertion to ensure that this generated file and the connect package are
// compatible. If you get a compiler error that this constant is not defined, this code was
// generated with a version of connect newer than the one compiled into your binary. You can fix the
// problem by either regenerating this code with an older version of connect or updating the connect
// version compiled into your binary.
const _ = connect.IsAtLeastVersion1_13_0

const (
	// UserServiceName is the fully-qualified name of the UserService service.
	UserServiceName = "user.v1.UserService"
)

// These constants are the fully-qualified names of the RPCs defined in this package. They're
// exposed at runtime as Spec.Procedure and as the final two segments of the HTTP route.
//
// Note that these are different from the fully-qualified method names used by
// google.golang.org/protobuf/reflect/protoreflect. To convert from these constants to
// reflection-formatted method names, remove the leading slash and convert the remaining slash to a
// period.
const (
	// UserServiceGetUserProcedure is the fully-qualified name of the UserService's GetUser RPC.
	UserServiceGetUserProcedure = "/user.v1.UserService/GetUser"
	// UserServiceUpdatePasswordProcedure is the fully-qualified name of the UserService's
	// UpdatePassword RPC.
	UserServiceUpdatePasswordProcedure = "/user.v1.UserService/UpdatePassword"
	// UserServiceGetAPIKeyProcedure is the fully-qualified name of the UserService's GetAPIKey RPC.
	UserServiceGetAPIKeyProcedure = "/user.v1.UserService/GetAPIKey"
	// UserServiceUpdateProfilePictureProcedure is the fully-qualified name of the UserService's
	// UpdateProfilePicture RPC.
	UserServiceUpdateProfilePictureProcedure = "/user.v1.UserService/UpdateProfilePicture"
	// UserServiceBeginPasskeyRegistrationProcedure is the fully-qualified name of the UserService's
	// BeginPasskeyRegistration RPC.
	UserServiceBeginPasskeyRegistrationProcedure = "/user.v1.UserService/BeginPasskeyRegistration"
	// UserServiceFinishPasskeyRegistrationProcedure is the fully-qualified name of the UserService's
	// FinishPasskeyRegistration RPC.
	UserServiceFinishPasskeyRegistrationProcedure = "/user.v1.UserService/FinishPasskeyRegistration"
)

// UserServiceClient is a client for the user.v1.UserService service.
type UserServiceClient interface {
	GetUser(context.Context, *connect.Request[v1.GetUserRequest]) (*connect.Response[v1.GetUserResponse], error)
	UpdatePassword(context.Context, *connect.Request[v1.UpdatePasswordRequest]) (*connect.Response[v1.UpdatePasswordResponse], error)
	GetAPIKey(context.Context, *connect.Request[v1.GetAPIKeyRequest]) (*connect.Response[v1.GetAPIKeyResponse], error)
	UpdateProfilePicture(context.Context, *connect.Request[v1.UpdateProfilePictureRequest]) (*connect.Response[v1.UpdateProfilePictureResponse], error)
	BeginPasskeyRegistration(context.Context, *connect.Request[v1.BeginPasskeyRegistrationRequest]) (*connect.Response[v1.BeginPasskeyRegistrationResponse], error)
	FinishPasskeyRegistration(context.Context, *connect.Request[v1.FinishPasskeyRegistrationRequest]) (*connect.Response[v1.FinishPasskeyRegistrationResponse], error)
}

// NewUserServiceClient constructs a client for the user.v1.UserService service. By default, it uses
// the Connect protocol with the binary Protobuf Codec, asks for gzipped responses, and sends
// uncompressed requests. To use the gRPC or gRPC-Web protocols, supply the connect.WithGRPC() or
// connect.WithGRPCWeb() options.
//
// The URL supplied here should be the base URL for the Connect or gRPC server (for example,
// http://api.acme.com or https://acme.com/grpc).
func NewUserServiceClient(httpClient connect.HTTPClient, baseURL string, opts ...connect.ClientOption) UserServiceClient {
	baseURL = strings.TrimRight(baseURL, "/")
	userServiceMethods := v1.File_user_v1_user_proto.Services().ByName("UserService").Methods()
	return &userServiceClient{
		getUser: connect.NewClient[v1.GetUserRequest, v1.GetUserResponse](
			httpClient,
			baseURL+UserServiceGetUserProcedure,
			connect.WithSchema(userServiceMethods.ByName("GetUser")),
			connect.WithClientOptions(opts...),
		),
		updatePassword: connect.NewClient[v1.UpdatePasswordRequest, v1.UpdatePasswordResponse](
			httpClient,
			baseURL+UserServiceUpdatePasswordProcedure,
			connect.WithSchema(userServiceMethods.ByName("UpdatePassword")),
			connect.WithClientOptions(opts...),
		),
		getAPIKey: connect.NewClient[v1.GetAPIKeyRequest, v1.GetAPIKeyResponse](
			httpClient,
			baseURL+UserServiceGetAPIKeyProcedure,
			connect.WithSchema(userServiceMethods.ByName("GetAPIKey")),
			connect.WithClientOptions(opts...),
		),
		updateProfilePicture: connect.NewClient[v1.UpdateProfilePictureRequest, v1.UpdateProfilePictureResponse](
			httpClient,
			baseURL+UserServiceUpdateProfilePictureProcedure,
			connect.WithSchema(userServiceMethods.ByName("UpdateProfilePicture")),
			connect.WithClientOptions(opts...),
		),
		beginPasskeyRegistration: connect.NewClient[v1.BeginPasskeyRegistrationRequest, v1.BeginPasskeyRegistrationResponse](
			httpClient,
			baseURL+UserServiceBeginPasskeyRegistrationProcedure,
			connect.WithSchema(userServiceMethods.ByName("BeginPasskeyRegistration")),
			connect.WithClientOptions(opts...),
		),
		finishPasskeyRegistration: connect.NewClient[v1.FinishPasskeyRegistrationRequest, v1.FinishPasskeyRegistrationResponse](
			httpClient,
			baseURL+UserServiceFinishPasskeyRegistrationProcedure,
			connect.WithSchema(userServiceMethods.ByName("FinishPasskeyRegistration")),
			connect.WithClientOptions(opts...),
		),
	}
}

// userServiceClient implements UserServiceClient.
type userServiceClient struct {
	getUser                   *connect.Client[v1.GetUserRequest, v1.GetUserResponse]
	updatePassword            *connect.Client[v1.UpdatePasswordRequest, v1.UpdatePasswordResponse]
	getAPIKey                 *connect.Client[v1.GetAPIKeyRequest, v1.GetAPIKeyResponse]
	updateProfilePicture      *connect.Client[v1.UpdateProfilePictureRequest, v1.UpdateProfilePictureResponse]
	beginPasskeyRegistration  *connect.Client[v1.BeginPasskeyRegistrationRequest, v1.BeginPasskeyRegistrationResponse]
	finishPasskeyRegistration *connect.Client[v1.FinishPasskeyRegistrationRequest, v1.FinishPasskeyRegistrationResponse]
}

// GetUser calls user.v1.UserService.GetUser.
func (c *userServiceClient) GetUser(ctx context.Context, req *connect.Request[v1.GetUserRequest]) (*connect.Response[v1.GetUserResponse], error) {
	return c.getUser.CallUnary(ctx, req)
}

// UpdatePassword calls user.v1.UserService.UpdatePassword.
func (c *userServiceClient) UpdatePassword(ctx context.Context, req *connect.Request[v1.UpdatePasswordRequest]) (*connect.Response[v1.UpdatePasswordResponse], error) {
	return c.updatePassword.CallUnary(ctx, req)
}

// GetAPIKey calls user.v1.UserService.GetAPIKey.
func (c *userServiceClient) GetAPIKey(ctx context.Context, req *connect.Request[v1.GetAPIKeyRequest]) (*connect.Response[v1.GetAPIKeyResponse], error) {
	return c.getAPIKey.CallUnary(ctx, req)
}

// UpdateProfilePicture calls user.v1.UserService.UpdateProfilePicture.
func (c *userServiceClient) UpdateProfilePicture(ctx context.Context, req *connect.Request[v1.UpdateProfilePictureRequest]) (*connect.Response[v1.UpdateProfilePictureResponse], error) {
	return c.updateProfilePicture.CallUnary(ctx, req)
}

// BeginPasskeyRegistration calls user.v1.UserService.BeginPasskeyRegistration.
func (c *userServiceClient) BeginPasskeyRegistration(ctx context.Context, req *connect.Request[v1.BeginPasskeyRegistrationRequest]) (*connect.Response[v1.BeginPasskeyRegistrationResponse], error) {
	return c.beginPasskeyRegistration.CallUnary(ctx, req)
}

// FinishPasskeyRegistration calls user.v1.UserService.FinishPasskeyRegistration.
func (c *userServiceClient) FinishPasskeyRegistration(ctx context.Context, req *connect.Request[v1.FinishPasskeyRegistrationRequest]) (*connect.Response[v1.FinishPasskeyRegistrationResponse], error) {
	return c.finishPasskeyRegistration.CallUnary(ctx, req)
}

// UserServiceHandler is an implementation of the user.v1.UserService service.
type UserServiceHandler interface {
	GetUser(context.Context, *connect.Request[v1.GetUserRequest]) (*connect.Response[v1.GetUserResponse], error)
	UpdatePassword(context.Context, *connect.Request[v1.UpdatePasswordRequest]) (*connect.Response[v1.UpdatePasswordResponse], error)
	GetAPIKey(context.Context, *connect.Request[v1.GetAPIKeyRequest]) (*connect.Response[v1.GetAPIKeyResponse], error)
	UpdateProfilePicture(context.Context, *connect.Request[v1.UpdateProfilePictureRequest]) (*connect.Response[v1.UpdateProfilePictureResponse], error)
	BeginPasskeyRegistration(context.Context, *connect.Request[v1.BeginPasskeyRegistrationRequest]) (*connect.Response[v1.BeginPasskeyRegistrationResponse], error)
	FinishPasskeyRegistration(context.Context, *connect.Request[v1.FinishPasskeyRegistrationRequest]) (*connect.Response[v1.FinishPasskeyRegistrationResponse], error)
}

// NewUserServiceHandler builds an HTTP handler from the service implementation. It returns the path
// on which to mount the handler and the handler itself.
//
// By default, handlers support the Connect, gRPC, and gRPC-Web protocols with the binary Protobuf
// and JSON codecs. They also support gzip compression.
func NewUserServiceHandler(svc UserServiceHandler, opts ...connect.HandlerOption) (string, http.Handler) {
	userServiceMethods := v1.File_user_v1_user_proto.Services().ByName("UserService").Methods()
	userServiceGetUserHandler := connect.NewUnaryHandler(
		UserServiceGetUserProcedure,
		svc.GetUser,
		connect.WithSchema(userServiceMethods.ByName("GetUser")),
		connect.WithHandlerOptions(opts...),
	)
	userServiceUpdatePasswordHandler := connect.NewUnaryHandler(
		UserServiceUpdatePasswordProcedure,
		svc.UpdatePassword,
		connect.WithSchema(userServiceMethods.ByName("UpdatePassword")),
		connect.WithHandlerOptions(opts...),
	)
	userServiceGetAPIKeyHandler := connect.NewUnaryHandler(
		UserServiceGetAPIKeyProcedure,
		svc.GetAPIKey,
		connect.WithSchema(userServiceMethods.ByName("GetAPIKey")),
		connect.WithHandlerOptions(opts...),
	)
	userServiceUpdateProfilePictureHandler := connect.NewUnaryHandler(
		UserServiceUpdateProfilePictureProcedure,
		svc.UpdateProfilePicture,
		connect.WithSchema(userServiceMethods.ByName("UpdateProfilePicture")),
		connect.WithHandlerOptions(opts...),
	)
	userServiceBeginPasskeyRegistrationHandler := connect.NewUnaryHandler(
		UserServiceBeginPasskeyRegistrationProcedure,
		svc.BeginPasskeyRegistration,
		connect.WithSchema(userServiceMethods.ByName("BeginPasskeyRegistration")),
		connect.WithHandlerOptions(opts...),
	)
	userServiceFinishPasskeyRegistrationHandler := connect.NewUnaryHandler(
		UserServiceFinishPasskeyRegistrationProcedure,
		svc.FinishPasskeyRegistration,
		connect.WithSchema(userServiceMethods.ByName("FinishPasskeyRegistration")),
		connect.WithHandlerOptions(opts...),
	)
	return "/user.v1.UserService/", http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		switch r.URL.Path {
		case UserServiceGetUserProcedure:
			userServiceGetUserHandler.ServeHTTP(w, r)
		case UserServiceUpdatePasswordProcedure:
			userServiceUpdatePasswordHandler.ServeHTTP(w, r)
		case UserServiceGetAPIKeyProcedure:
			userServiceGetAPIKeyHandler.ServeHTTP(w, r)
		case UserServiceUpdateProfilePictureProcedure:
			userServiceUpdateProfilePictureHandler.ServeHTTP(w, r)
		case UserServiceBeginPasskeyRegistrationProcedure:
			userServiceBeginPasskeyRegistrationHandler.ServeHTTP(w, r)
		case UserServiceFinishPasskeyRegistrationProcedure:
			userServiceFinishPasskeyRegistrationHandler.ServeHTTP(w, r)
		default:
			http.NotFound(w, r)
		}
	})
}

// UnimplementedUserServiceHandler returns CodeUnimplemented from all methods.
type UnimplementedUserServiceHandler struct{}

func (UnimplementedUserServiceHandler) GetUser(context.Context, *connect.Request[v1.GetUserRequest]) (*connect.Response[v1.GetUserResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("user.v1.UserService.GetUser is not implemented"))
}

func (UnimplementedUserServiceHandler) UpdatePassword(context.Context, *connect.Request[v1.UpdatePasswordRequest]) (*connect.Response[v1.UpdatePasswordResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("user.v1.UserService.UpdatePassword is not implemented"))
}

func (UnimplementedUserServiceHandler) GetAPIKey(context.Context, *connect.Request[v1.GetAPIKeyRequest]) (*connect.Response[v1.GetAPIKeyResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("user.v1.UserService.GetAPIKey is not implemented"))
}

func (UnimplementedUserServiceHandler) UpdateProfilePicture(context.Context, *connect.Request[v1.UpdateProfilePictureRequest]) (*connect.Response[v1.UpdateProfilePictureResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("user.v1.UserService.UpdateProfilePicture is not implemented"))
}

func (UnimplementedUserServiceHandler) BeginPasskeyRegistration(context.Context, *connect.Request[v1.BeginPasskeyRegistrationRequest]) (*connect.Response[v1.BeginPasskeyRegistrationResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("user.v1.UserService.BeginPasskeyRegistration is not implemented"))
}

func (UnimplementedUserServiceHandler) FinishPasskeyRegistration(context.Context, *connect.Request[v1.FinishPasskeyRegistrationRequest]) (*connect.Response[v1.FinishPasskeyRegistrationResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("user.v1.UserService.FinishPasskeyRegistration is not implemented"))
}

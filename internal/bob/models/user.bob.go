// Code generated by BobGen sql (devel). DO NOT EDIT.
// This file is meant to be re-generated in place and/or deleted at any time.

package models

import (
	"context"
	"fmt"
	"io"

	"github.com/aarondl/opt/null"
	"github.com/aarondl/opt/omit"
	"github.com/aarondl/opt/omitnull"
	"github.com/stephenafamo/bob"
	"github.com/stephenafamo/bob/dialect/sqlite"
	"github.com/stephenafamo/bob/dialect/sqlite/dialect"
	"github.com/stephenafamo/bob/dialect/sqlite/dm"
	"github.com/stephenafamo/bob/dialect/sqlite/sm"
	"github.com/stephenafamo/bob/dialect/sqlite/um"
	"github.com/stephenafamo/bob/expr"
	"github.com/stephenafamo/bob/mods"
	"github.com/stephenafamo/bob/orm"
)

// User is an object representing the database table.
type User struct {
	ID               int32           `db:"id,pk" `
	Username         string          `db:"username" `
	Password         string          `db:"password" `
	ProfilePictureID null.Val[int32] `db:"profile_picture_id" `
	WebauthnID       string          `db:"webauthn_id" `

	R userR `db:"-" `
}

// UserSlice is an alias for a slice of pointers to User.
// This should almost always be used instead of []*User.
type UserSlice []*User

// Users contains methods to work with the user table
var Users = sqlite.NewTablex[*User, UserSlice, *UserSetter]("", "user", buildUserColumns("user"))

// UsersQuery is a query on the user table
type UsersQuery = *sqlite.ViewQuery[*User, UserSlice]

// userR is where relationships are stored.
type userR struct {
	Credentials        CredentialSlice // fk_credential_0
	Files              FileSlice       // fk_file_0
	Items              ItemSlice       // fk_item_0
	ProfilePictureFile *File           // fk_user_0
}

func buildUserColumns(alias string) userColumns {
	return userColumns{
		ColumnsExpr: expr.NewColumnsExpr(
			"id", "username", "password", "profile_picture_id", "webauthn_id",
		).WithParent("user"),
		tableAlias:       alias,
		ID:               sqlite.Quote(alias, "id"),
		Username:         sqlite.Quote(alias, "username"),
		Password:         sqlite.Quote(alias, "password"),
		ProfilePictureID: sqlite.Quote(alias, "profile_picture_id"),
		WebauthnID:       sqlite.Quote(alias, "webauthn_id"),
	}
}

type userColumns struct {
	expr.ColumnsExpr
	tableAlias       string
	ID               sqlite.Expression
	Username         sqlite.Expression
	Password         sqlite.Expression
	ProfilePictureID sqlite.Expression
	WebauthnID       sqlite.Expression
}

func (c userColumns) Alias() string {
	return c.tableAlias
}

func (userColumns) AliasedAs(alias string) userColumns {
	return buildUserColumns(alias)
}

// UserSetter is used for insert/upsert/update operations
// All values are optional, and do not have to be set
// Generated columns are not included
type UserSetter struct {
	ID               omit.Val[int32]     `db:"id,pk" `
	Username         omit.Val[string]    `db:"username" `
	Password         omit.Val[string]    `db:"password" `
	ProfilePictureID omitnull.Val[int32] `db:"profile_picture_id" `
	WebauthnID       omit.Val[string]    `db:"webauthn_id" `
}

func (s UserSetter) SetColumns() []string {
	vals := make([]string, 0, 5)
	if s.ID.IsValue() {
		vals = append(vals, "id")
	}
	if s.Username.IsValue() {
		vals = append(vals, "username")
	}
	if s.Password.IsValue() {
		vals = append(vals, "password")
	}
	if !s.ProfilePictureID.IsUnset() {
		vals = append(vals, "profile_picture_id")
	}
	if s.WebauthnID.IsValue() {
		vals = append(vals, "webauthn_id")
	}
	return vals
}

func (s UserSetter) Overwrite(t *User) {
	if s.ID.IsValue() {
		t.ID = s.ID.MustGet()
	}
	if s.Username.IsValue() {
		t.Username = s.Username.MustGet()
	}
	if s.Password.IsValue() {
		t.Password = s.Password.MustGet()
	}
	if !s.ProfilePictureID.IsUnset() {
		t.ProfilePictureID = s.ProfilePictureID.MustGetNull()
	}
	if s.WebauthnID.IsValue() {
		t.WebauthnID = s.WebauthnID.MustGet()
	}
}

func (s *UserSetter) Apply(q *dialect.InsertQuery) {
	q.AppendHooks(func(ctx context.Context, exec bob.Executor) (context.Context, error) {
		return Users.BeforeInsertHooks.RunHooks(ctx, exec, s)
	})

	if len(q.TableRef.Columns) == 0 {
		q.TableRef.Columns = s.SetColumns()
		if len(q.TableRef.Columns) == 0 {
			q.TableRef.Columns = []string{"id"}
		}

	}

	q.AppendValues(bob.ExpressionFunc(func(ctx context.Context, w io.Writer, d bob.Dialect, start int) ([]any, error) {
		vals := make([]bob.Expression, 0, 5)
		if s.ID.IsValue() {
			vals = append(vals, sqlite.Arg(s.ID.MustGet()))
		}

		if s.Username.IsValue() {
			vals = append(vals, sqlite.Arg(s.Username.MustGet()))
		}

		if s.Password.IsValue() {
			vals = append(vals, sqlite.Arg(s.Password.MustGet()))
		}

		if !s.ProfilePictureID.IsUnset() {
			vals = append(vals, sqlite.Arg(s.ProfilePictureID.MustGetNull()))
		}

		if s.WebauthnID.IsValue() {
			vals = append(vals, sqlite.Arg(s.WebauthnID.MustGet()))
		}

		if len(vals) == 0 {
			vals = append(vals, sqlite.Arg(nil))
		}

		return bob.ExpressSlice(ctx, w, d, start, vals, "", ", ", "")
	}))
}

func (s UserSetter) UpdateMod() bob.Mod[*dialect.UpdateQuery] {
	return um.Set(s.Expressions()...)
}

func (s UserSetter) Expressions(prefix ...string) []bob.Expression {
	exprs := make([]bob.Expression, 0, 5)

	if s.ID.IsValue() {
		exprs = append(exprs, expr.Join{Sep: " = ", Exprs: []bob.Expression{
			sqlite.Quote(append(prefix, "id")...),
			sqlite.Arg(s.ID),
		}})
	}

	if s.Username.IsValue() {
		exprs = append(exprs, expr.Join{Sep: " = ", Exprs: []bob.Expression{
			sqlite.Quote(append(prefix, "username")...),
			sqlite.Arg(s.Username),
		}})
	}

	if s.Password.IsValue() {
		exprs = append(exprs, expr.Join{Sep: " = ", Exprs: []bob.Expression{
			sqlite.Quote(append(prefix, "password")...),
			sqlite.Arg(s.Password),
		}})
	}

	if !s.ProfilePictureID.IsUnset() {
		exprs = append(exprs, expr.Join{Sep: " = ", Exprs: []bob.Expression{
			sqlite.Quote(append(prefix, "profile_picture_id")...),
			sqlite.Arg(s.ProfilePictureID),
		}})
	}

	if s.WebauthnID.IsValue() {
		exprs = append(exprs, expr.Join{Sep: " = ", Exprs: []bob.Expression{
			sqlite.Quote(append(prefix, "webauthn_id")...),
			sqlite.Arg(s.WebauthnID),
		}})
	}

	return exprs
}

// FindUser retrieves a single record by primary key
// If cols is empty Find will return all columns.
func FindUser(ctx context.Context, exec bob.Executor, IDPK int32, cols ...string) (*User, error) {
	if len(cols) == 0 {
		return Users.Query(
			sm.Where(Users.Columns.ID.EQ(sqlite.Arg(IDPK))),
		).One(ctx, exec)
	}

	return Users.Query(
		sm.Where(Users.Columns.ID.EQ(sqlite.Arg(IDPK))),
		sm.Columns(Users.Columns.Only(cols...)),
	).One(ctx, exec)
}

// UserExists checks the presence of a single record by primary key
func UserExists(ctx context.Context, exec bob.Executor, IDPK int32) (bool, error) {
	return Users.Query(
		sm.Where(Users.Columns.ID.EQ(sqlite.Arg(IDPK))),
	).Exists(ctx, exec)
}

// AfterQueryHook is called after User is retrieved from the database
func (o *User) AfterQueryHook(ctx context.Context, exec bob.Executor, queryType bob.QueryType) error {
	var err error

	switch queryType {
	case bob.QueryTypeSelect:
		ctx, err = Users.AfterSelectHooks.RunHooks(ctx, exec, UserSlice{o})
	case bob.QueryTypeInsert:
		ctx, err = Users.AfterInsertHooks.RunHooks(ctx, exec, UserSlice{o})
	case bob.QueryTypeUpdate:
		ctx, err = Users.AfterUpdateHooks.RunHooks(ctx, exec, UserSlice{o})
	case bob.QueryTypeDelete:
		ctx, err = Users.AfterDeleteHooks.RunHooks(ctx, exec, UserSlice{o})
	}

	return err
}

// primaryKeyVals returns the primary key values of the User
func (o *User) primaryKeyVals() bob.Expression {
	return sqlite.Arg(o.ID)
}

func (o *User) pkEQ() dialect.Expression {
	return sqlite.Quote("user", "id").EQ(bob.ExpressionFunc(func(ctx context.Context, w io.Writer, d bob.Dialect, start int) ([]any, error) {
		return o.primaryKeyVals().WriteSQL(ctx, w, d, start)
	}))
}

// Update uses an executor to update the User
func (o *User) Update(ctx context.Context, exec bob.Executor, s *UserSetter) error {
	v, err := Users.Update(s.UpdateMod(), um.Where(o.pkEQ())).One(ctx, exec)
	if err != nil {
		return err
	}

	o.R = v.R
	*o = *v

	return nil
}

// Delete deletes a single User record with an executor
func (o *User) Delete(ctx context.Context, exec bob.Executor) error {
	_, err := Users.Delete(dm.Where(o.pkEQ())).Exec(ctx, exec)
	return err
}

// Reload refreshes the User using the executor
func (o *User) Reload(ctx context.Context, exec bob.Executor) error {
	o2, err := Users.Query(
		sm.Where(Users.Columns.ID.EQ(sqlite.Arg(o.ID))),
	).One(ctx, exec)
	if err != nil {
		return err
	}
	o2.R = o.R
	*o = *o2

	return nil
}

// AfterQueryHook is called after UserSlice is retrieved from the database
func (o UserSlice) AfterQueryHook(ctx context.Context, exec bob.Executor, queryType bob.QueryType) error {
	var err error

	switch queryType {
	case bob.QueryTypeSelect:
		ctx, err = Users.AfterSelectHooks.RunHooks(ctx, exec, o)
	case bob.QueryTypeInsert:
		ctx, err = Users.AfterInsertHooks.RunHooks(ctx, exec, o)
	case bob.QueryTypeUpdate:
		ctx, err = Users.AfterUpdateHooks.RunHooks(ctx, exec, o)
	case bob.QueryTypeDelete:
		ctx, err = Users.AfterDeleteHooks.RunHooks(ctx, exec, o)
	}

	return err
}

func (o UserSlice) pkIN() dialect.Expression {
	if len(o) == 0 {
		return sqlite.Raw("NULL")
	}

	return sqlite.Quote("user", "id").In(bob.ExpressionFunc(func(ctx context.Context, w io.Writer, d bob.Dialect, start int) ([]any, error) {
		pkPairs := make([]bob.Expression, len(o))
		for i, row := range o {
			pkPairs[i] = row.primaryKeyVals()
		}
		return bob.ExpressSlice(ctx, w, d, start, pkPairs, "", ", ", "")
	}))
}

// copyMatchingRows finds models in the given slice that have the same primary key
// then it first copies the existing relationships from the old model to the new model
// and then replaces the old model in the slice with the new model
func (o UserSlice) copyMatchingRows(from ...*User) {
	for i, old := range o {
		for _, new := range from {
			if new.ID != old.ID {
				continue
			}
			new.R = old.R
			o[i] = new
			break
		}
	}
}

// UpdateMod modifies an update query with "WHERE primary_key IN (o...)"
func (o UserSlice) UpdateMod() bob.Mod[*dialect.UpdateQuery] {
	return bob.ModFunc[*dialect.UpdateQuery](func(q *dialect.UpdateQuery) {
		q.AppendHooks(func(ctx context.Context, exec bob.Executor) (context.Context, error) {
			return Users.BeforeUpdateHooks.RunHooks(ctx, exec, o)
		})

		q.AppendLoader(bob.LoaderFunc(func(ctx context.Context, exec bob.Executor, retrieved any) error {
			var err error
			switch retrieved := retrieved.(type) {
			case *User:
				o.copyMatchingRows(retrieved)
			case []*User:
				o.copyMatchingRows(retrieved...)
			case UserSlice:
				o.copyMatchingRows(retrieved...)
			default:
				// If the retrieved value is not a User or a slice of User
				// then run the AfterUpdateHooks on the slice
				_, err = Users.AfterUpdateHooks.RunHooks(ctx, exec, o)
			}

			return err
		}))

		q.AppendWhere(o.pkIN())
	})
}

// DeleteMod modifies an delete query with "WHERE primary_key IN (o...)"
func (o UserSlice) DeleteMod() bob.Mod[*dialect.DeleteQuery] {
	return bob.ModFunc[*dialect.DeleteQuery](func(q *dialect.DeleteQuery) {
		q.AppendHooks(func(ctx context.Context, exec bob.Executor) (context.Context, error) {
			return Users.BeforeDeleteHooks.RunHooks(ctx, exec, o)
		})

		q.AppendLoader(bob.LoaderFunc(func(ctx context.Context, exec bob.Executor, retrieved any) error {
			var err error
			switch retrieved := retrieved.(type) {
			case *User:
				o.copyMatchingRows(retrieved)
			case []*User:
				o.copyMatchingRows(retrieved...)
			case UserSlice:
				o.copyMatchingRows(retrieved...)
			default:
				// If the retrieved value is not a User or a slice of User
				// then run the AfterDeleteHooks on the slice
				_, err = Users.AfterDeleteHooks.RunHooks(ctx, exec, o)
			}

			return err
		}))

		q.AppendWhere(o.pkIN())
	})
}

func (o UserSlice) UpdateAll(ctx context.Context, exec bob.Executor, vals UserSetter) error {
	if len(o) == 0 {
		return nil
	}

	_, err := Users.Update(vals.UpdateMod(), o.UpdateMod()).All(ctx, exec)
	return err
}

func (o UserSlice) DeleteAll(ctx context.Context, exec bob.Executor) error {
	if len(o) == 0 {
		return nil
	}

	_, err := Users.Delete(o.DeleteMod()).Exec(ctx, exec)
	return err
}

func (o UserSlice) ReloadAll(ctx context.Context, exec bob.Executor) error {
	if len(o) == 0 {
		return nil
	}

	o2, err := Users.Query(sm.Where(o.pkIN())).All(ctx, exec)
	if err != nil {
		return err
	}

	o.copyMatchingRows(o2...)

	return nil
}

// Credentials starts a query for related objects on credential
func (o *User) Credentials(mods ...bob.Mod[*dialect.SelectQuery]) CredentialsQuery {
	return Credentials.Query(append(mods,
		sm.Where(Credentials.Columns.UserID.EQ(sqlite.Arg(o.ID))),
	)...)
}

func (os UserSlice) Credentials(mods ...bob.Mod[*dialect.SelectQuery]) CredentialsQuery {
	PKArgSlice := make([]bob.Expression, len(os))
	for i, o := range os {
		PKArgSlice[i] = sqlite.ArgGroup(o.ID)
	}
	PKArgExpr := sqlite.Group(PKArgSlice...)

	return Credentials.Query(append(mods,
		sm.Where(sqlite.Group(Credentials.Columns.UserID).OP("IN", PKArgExpr)),
	)...)
}

// Files starts a query for related objects on file
func (o *User) Files(mods ...bob.Mod[*dialect.SelectQuery]) FilesQuery {
	return Files.Query(append(mods,
		sm.Where(Files.Columns.UserID.EQ(sqlite.Arg(o.ID))),
	)...)
}

func (os UserSlice) Files(mods ...bob.Mod[*dialect.SelectQuery]) FilesQuery {
	PKArgSlice := make([]bob.Expression, len(os))
	for i, o := range os {
		PKArgSlice[i] = sqlite.ArgGroup(o.ID)
	}
	PKArgExpr := sqlite.Group(PKArgSlice...)

	return Files.Query(append(mods,
		sm.Where(sqlite.Group(Files.Columns.UserID).OP("IN", PKArgExpr)),
	)...)
}

// Items starts a query for related objects on item
func (o *User) Items(mods ...bob.Mod[*dialect.SelectQuery]) ItemsQuery {
	return Items.Query(append(mods,
		sm.Where(Items.Columns.UserID.EQ(sqlite.Arg(o.ID))),
	)...)
}

func (os UserSlice) Items(mods ...bob.Mod[*dialect.SelectQuery]) ItemsQuery {
	PKArgSlice := make([]bob.Expression, len(os))
	for i, o := range os {
		PKArgSlice[i] = sqlite.ArgGroup(o.ID)
	}
	PKArgExpr := sqlite.Group(PKArgSlice...)

	return Items.Query(append(mods,
		sm.Where(sqlite.Group(Items.Columns.UserID).OP("IN", PKArgExpr)),
	)...)
}

// ProfilePictureFile starts a query for related objects on file
func (o *User) ProfilePictureFile(mods ...bob.Mod[*dialect.SelectQuery]) FilesQuery {
	return Files.Query(append(mods,
		sm.Where(Files.Columns.ID.EQ(sqlite.Arg(o.ProfilePictureID))),
	)...)
}

func (os UserSlice) ProfilePictureFile(mods ...bob.Mod[*dialect.SelectQuery]) FilesQuery {
	PKArgSlice := make([]bob.Expression, len(os))
	for i, o := range os {
		PKArgSlice[i] = sqlite.ArgGroup(o.ProfilePictureID)
	}
	PKArgExpr := sqlite.Group(PKArgSlice...)

	return Files.Query(append(mods,
		sm.Where(sqlite.Group(Files.Columns.ID).OP("IN", PKArgExpr)),
	)...)
}

func insertUserCredentials0(ctx context.Context, exec bob.Executor, credentials1 []*CredentialSetter, user0 *User) (CredentialSlice, error) {
	for i := range credentials1 {
		credentials1[i].UserID = omit.From(user0.ID)
	}

	ret, err := Credentials.Insert(bob.ToMods(credentials1...)).All(ctx, exec)
	if err != nil {
		return ret, fmt.Errorf("insertUserCredentials0: %w", err)
	}

	return ret, nil
}

func attachUserCredentials0(ctx context.Context, exec bob.Executor, count int, credentials1 CredentialSlice, user0 *User) (CredentialSlice, error) {
	setter := &CredentialSetter{
		UserID: omit.From(user0.ID),
	}

	err := credentials1.UpdateAll(ctx, exec, *setter)
	if err != nil {
		return nil, fmt.Errorf("attachUserCredentials0: %w", err)
	}

	return credentials1, nil
}

func (user0 *User) InsertCredentials(ctx context.Context, exec bob.Executor, related ...*CredentialSetter) error {
	if len(related) == 0 {
		return nil
	}

	var err error

	credentials1, err := insertUserCredentials0(ctx, exec, related, user0)
	if err != nil {
		return err
	}

	user0.R.Credentials = append(user0.R.Credentials, credentials1...)

	for _, rel := range credentials1 {
		rel.R.User = user0
	}
	return nil
}

func (user0 *User) AttachCredentials(ctx context.Context, exec bob.Executor, related ...*Credential) error {
	if len(related) == 0 {
		return nil
	}

	var err error
	credentials1 := CredentialSlice(related)

	_, err = attachUserCredentials0(ctx, exec, len(related), credentials1, user0)
	if err != nil {
		return err
	}

	user0.R.Credentials = append(user0.R.Credentials, credentials1...)

	for _, rel := range related {
		rel.R.User = user0
	}

	return nil
}

func insertUserFiles0(ctx context.Context, exec bob.Executor, files1 []*FileSetter, user0 *User) (FileSlice, error) {
	for i := range files1 {
		files1[i].UserID = omit.From(user0.ID)
	}

	ret, err := Files.Insert(bob.ToMods(files1...)).All(ctx, exec)
	if err != nil {
		return ret, fmt.Errorf("insertUserFiles0: %w", err)
	}

	return ret, nil
}

func attachUserFiles0(ctx context.Context, exec bob.Executor, count int, files1 FileSlice, user0 *User) (FileSlice, error) {
	setter := &FileSetter{
		UserID: omit.From(user0.ID),
	}

	err := files1.UpdateAll(ctx, exec, *setter)
	if err != nil {
		return nil, fmt.Errorf("attachUserFiles0: %w", err)
	}

	return files1, nil
}

func (user0 *User) InsertFiles(ctx context.Context, exec bob.Executor, related ...*FileSetter) error {
	if len(related) == 0 {
		return nil
	}

	var err error

	files1, err := insertUserFiles0(ctx, exec, related, user0)
	if err != nil {
		return err
	}

	user0.R.Files = append(user0.R.Files, files1...)

	for _, rel := range files1 {
		rel.R.User = user0
	}
	return nil
}

func (user0 *User) AttachFiles(ctx context.Context, exec bob.Executor, related ...*File) error {
	if len(related) == 0 {
		return nil
	}

	var err error
	files1 := FileSlice(related)

	_, err = attachUserFiles0(ctx, exec, len(related), files1, user0)
	if err != nil {
		return err
	}

	user0.R.Files = append(user0.R.Files, files1...)

	for _, rel := range related {
		rel.R.User = user0
	}

	return nil
}

func insertUserItems0(ctx context.Context, exec bob.Executor, items1 []*ItemSetter, user0 *User) (ItemSlice, error) {
	for i := range items1 {
		items1[i].UserID = omit.From(user0.ID)
	}

	ret, err := Items.Insert(bob.ToMods(items1...)).All(ctx, exec)
	if err != nil {
		return ret, fmt.Errorf("insertUserItems0: %w", err)
	}

	return ret, nil
}

func attachUserItems0(ctx context.Context, exec bob.Executor, count int, items1 ItemSlice, user0 *User) (ItemSlice, error) {
	setter := &ItemSetter{
		UserID: omit.From(user0.ID),
	}

	err := items1.UpdateAll(ctx, exec, *setter)
	if err != nil {
		return nil, fmt.Errorf("attachUserItems0: %w", err)
	}

	return items1, nil
}

func (user0 *User) InsertItems(ctx context.Context, exec bob.Executor, related ...*ItemSetter) error {
	if len(related) == 0 {
		return nil
	}

	var err error

	items1, err := insertUserItems0(ctx, exec, related, user0)
	if err != nil {
		return err
	}

	user0.R.Items = append(user0.R.Items, items1...)

	for _, rel := range items1 {
		rel.R.User = user0
	}
	return nil
}

func (user0 *User) AttachItems(ctx context.Context, exec bob.Executor, related ...*Item) error {
	if len(related) == 0 {
		return nil
	}

	var err error
	items1 := ItemSlice(related)

	_, err = attachUserItems0(ctx, exec, len(related), items1, user0)
	if err != nil {
		return err
	}

	user0.R.Items = append(user0.R.Items, items1...)

	for _, rel := range related {
		rel.R.User = user0
	}

	return nil
}

func attachUserProfilePictureFile0(ctx context.Context, exec bob.Executor, count int, user0 *User, file1 *File) (*User, error) {
	setter := &UserSetter{
		ProfilePictureID: omitnull.From(file1.ID),
	}

	err := user0.Update(ctx, exec, setter)
	if err != nil {
		return nil, fmt.Errorf("attachUserProfilePictureFile0: %w", err)
	}

	return user0, nil
}

func (user0 *User) InsertProfilePictureFile(ctx context.Context, exec bob.Executor, related *FileSetter) error {
	file1, err := Files.Insert(related).One(ctx, exec)
	if err != nil {
		return fmt.Errorf("inserting related objects: %w", err)
	}

	_, err = attachUserProfilePictureFile0(ctx, exec, 1, user0, file1)
	if err != nil {
		return err
	}

	user0.R.ProfilePictureFile = file1

	file1.R.ProfilePictureUsers = append(file1.R.ProfilePictureUsers, user0)

	return nil
}

func (user0 *User) AttachProfilePictureFile(ctx context.Context, exec bob.Executor, file1 *File) error {
	var err error

	_, err = attachUserProfilePictureFile0(ctx, exec, 1, user0, file1)
	if err != nil {
		return err
	}

	user0.R.ProfilePictureFile = file1

	file1.R.ProfilePictureUsers = append(file1.R.ProfilePictureUsers, user0)

	return nil
}

type userWhere[Q sqlite.Filterable] struct {
	ID               sqlite.WhereMod[Q, int32]
	Username         sqlite.WhereMod[Q, string]
	Password         sqlite.WhereMod[Q, string]
	ProfilePictureID sqlite.WhereNullMod[Q, int32]
	WebauthnID       sqlite.WhereMod[Q, string]
}

func (userWhere[Q]) AliasedAs(alias string) userWhere[Q] {
	return buildUserWhere[Q](buildUserColumns(alias))
}

func buildUserWhere[Q sqlite.Filterable](cols userColumns) userWhere[Q] {
	return userWhere[Q]{
		ID:               sqlite.Where[Q, int32](cols.ID),
		Username:         sqlite.Where[Q, string](cols.Username),
		Password:         sqlite.Where[Q, string](cols.Password),
		ProfilePictureID: sqlite.WhereNull[Q, int32](cols.ProfilePictureID),
		WebauthnID:       sqlite.Where[Q, string](cols.WebauthnID),
	}
}

func (o *User) Preload(name string, retrieved any) error {
	if o == nil {
		return nil
	}

	switch name {
	case "Credentials":
		rels, ok := retrieved.(CredentialSlice)
		if !ok {
			return fmt.Errorf("user cannot load %T as %q", retrieved, name)
		}

		o.R.Credentials = rels

		for _, rel := range rels {
			if rel != nil {
				rel.R.User = o
			}
		}
		return nil
	case "Files":
		rels, ok := retrieved.(FileSlice)
		if !ok {
			return fmt.Errorf("user cannot load %T as %q", retrieved, name)
		}

		o.R.Files = rels

		for _, rel := range rels {
			if rel != nil {
				rel.R.User = o
			}
		}
		return nil
	case "Items":
		rels, ok := retrieved.(ItemSlice)
		if !ok {
			return fmt.Errorf("user cannot load %T as %q", retrieved, name)
		}

		o.R.Items = rels

		for _, rel := range rels {
			if rel != nil {
				rel.R.User = o
			}
		}
		return nil
	case "ProfilePictureFile":
		rel, ok := retrieved.(*File)
		if !ok {
			return fmt.Errorf("user cannot load %T as %q", retrieved, name)
		}

		o.R.ProfilePictureFile = rel

		if rel != nil {
			rel.R.ProfilePictureUsers = UserSlice{o}
		}
		return nil
	default:
		return fmt.Errorf("user has no relationship %q", name)
	}
}

type userPreloader struct {
	ProfilePictureFile func(...sqlite.PreloadOption) sqlite.Preloader
}

func buildUserPreloader() userPreloader {
	return userPreloader{
		ProfilePictureFile: func(opts ...sqlite.PreloadOption) sqlite.Preloader {
			return sqlite.Preload[*File, FileSlice](sqlite.PreloadRel{
				Name: "ProfilePictureFile",
				Sides: []sqlite.PreloadSide{
					{
						From:        Users,
						To:          Files,
						FromColumns: []string{"profile_picture_id"},
						ToColumns:   []string{"id"},
					},
				},
			}, Files.Columns.Names(), opts...)
		},
	}
}

type userThenLoader[Q orm.Loadable] struct {
	Credentials        func(...bob.Mod[*dialect.SelectQuery]) orm.Loader[Q]
	Files              func(...bob.Mod[*dialect.SelectQuery]) orm.Loader[Q]
	Items              func(...bob.Mod[*dialect.SelectQuery]) orm.Loader[Q]
	ProfilePictureFile func(...bob.Mod[*dialect.SelectQuery]) orm.Loader[Q]
}

func buildUserThenLoader[Q orm.Loadable]() userThenLoader[Q] {
	type CredentialsLoadInterface interface {
		LoadCredentials(context.Context, bob.Executor, ...bob.Mod[*dialect.SelectQuery]) error
	}
	type FilesLoadInterface interface {
		LoadFiles(context.Context, bob.Executor, ...bob.Mod[*dialect.SelectQuery]) error
	}
	type ItemsLoadInterface interface {
		LoadItems(context.Context, bob.Executor, ...bob.Mod[*dialect.SelectQuery]) error
	}
	type ProfilePictureFileLoadInterface interface {
		LoadProfilePictureFile(context.Context, bob.Executor, ...bob.Mod[*dialect.SelectQuery]) error
	}

	return userThenLoader[Q]{
		Credentials: thenLoadBuilder[Q](
			"Credentials",
			func(ctx context.Context, exec bob.Executor, retrieved CredentialsLoadInterface, mods ...bob.Mod[*dialect.SelectQuery]) error {
				return retrieved.LoadCredentials(ctx, exec, mods...)
			},
		),
		Files: thenLoadBuilder[Q](
			"Files",
			func(ctx context.Context, exec bob.Executor, retrieved FilesLoadInterface, mods ...bob.Mod[*dialect.SelectQuery]) error {
				return retrieved.LoadFiles(ctx, exec, mods...)
			},
		),
		Items: thenLoadBuilder[Q](
			"Items",
			func(ctx context.Context, exec bob.Executor, retrieved ItemsLoadInterface, mods ...bob.Mod[*dialect.SelectQuery]) error {
				return retrieved.LoadItems(ctx, exec, mods...)
			},
		),
		ProfilePictureFile: thenLoadBuilder[Q](
			"ProfilePictureFile",
			func(ctx context.Context, exec bob.Executor, retrieved ProfilePictureFileLoadInterface, mods ...bob.Mod[*dialect.SelectQuery]) error {
				return retrieved.LoadProfilePictureFile(ctx, exec, mods...)
			},
		),
	}
}

// LoadCredentials loads the user's Credentials into the .R struct
func (o *User) LoadCredentials(ctx context.Context, exec bob.Executor, mods ...bob.Mod[*dialect.SelectQuery]) error {
	if o == nil {
		return nil
	}

	// Reset the relationship
	o.R.Credentials = nil

	related, err := o.Credentials(mods...).All(ctx, exec)
	if err != nil {
		return err
	}

	for _, rel := range related {
		rel.R.User = o
	}

	o.R.Credentials = related
	return nil
}

// LoadCredentials loads the user's Credentials into the .R struct
func (os UserSlice) LoadCredentials(ctx context.Context, exec bob.Executor, mods ...bob.Mod[*dialect.SelectQuery]) error {
	if len(os) == 0 {
		return nil
	}

	credentials, err := os.Credentials(mods...).All(ctx, exec)
	if err != nil {
		return err
	}

	for _, o := range os {
		if o == nil {
			continue
		}

		o.R.Credentials = nil
	}

	for _, o := range os {
		if o == nil {
			continue
		}

		for _, rel := range credentials {

			if o.ID != rel.UserID {
				continue
			}

			rel.R.User = o

			o.R.Credentials = append(o.R.Credentials, rel)
		}
	}

	return nil
}

// LoadFiles loads the user's Files into the .R struct
func (o *User) LoadFiles(ctx context.Context, exec bob.Executor, mods ...bob.Mod[*dialect.SelectQuery]) error {
	if o == nil {
		return nil
	}

	// Reset the relationship
	o.R.Files = nil

	related, err := o.Files(mods...).All(ctx, exec)
	if err != nil {
		return err
	}

	for _, rel := range related {
		rel.R.User = o
	}

	o.R.Files = related
	return nil
}

// LoadFiles loads the user's Files into the .R struct
func (os UserSlice) LoadFiles(ctx context.Context, exec bob.Executor, mods ...bob.Mod[*dialect.SelectQuery]) error {
	if len(os) == 0 {
		return nil
	}

	files, err := os.Files(mods...).All(ctx, exec)
	if err != nil {
		return err
	}

	for _, o := range os {
		if o == nil {
			continue
		}

		o.R.Files = nil
	}

	for _, o := range os {
		if o == nil {
			continue
		}

		for _, rel := range files {

			if o.ID != rel.UserID {
				continue
			}

			rel.R.User = o

			o.R.Files = append(o.R.Files, rel)
		}
	}

	return nil
}

// LoadItems loads the user's Items into the .R struct
func (o *User) LoadItems(ctx context.Context, exec bob.Executor, mods ...bob.Mod[*dialect.SelectQuery]) error {
	if o == nil {
		return nil
	}

	// Reset the relationship
	o.R.Items = nil

	related, err := o.Items(mods...).All(ctx, exec)
	if err != nil {
		return err
	}

	for _, rel := range related {
		rel.R.User = o
	}

	o.R.Items = related
	return nil
}

// LoadItems loads the user's Items into the .R struct
func (os UserSlice) LoadItems(ctx context.Context, exec bob.Executor, mods ...bob.Mod[*dialect.SelectQuery]) error {
	if len(os) == 0 {
		return nil
	}

	items, err := os.Items(mods...).All(ctx, exec)
	if err != nil {
		return err
	}

	for _, o := range os {
		if o == nil {
			continue
		}

		o.R.Items = nil
	}

	for _, o := range os {
		if o == nil {
			continue
		}

		for _, rel := range items {

			if o.ID != rel.UserID {
				continue
			}

			rel.R.User = o

			o.R.Items = append(o.R.Items, rel)
		}
	}

	return nil
}

// LoadProfilePictureFile loads the user's ProfilePictureFile into the .R struct
func (o *User) LoadProfilePictureFile(ctx context.Context, exec bob.Executor, mods ...bob.Mod[*dialect.SelectQuery]) error {
	if o == nil {
		return nil
	}

	// Reset the relationship
	o.R.ProfilePictureFile = nil

	related, err := o.ProfilePictureFile(mods...).One(ctx, exec)
	if err != nil {
		return err
	}

	related.R.ProfilePictureUsers = UserSlice{o}

	o.R.ProfilePictureFile = related
	return nil
}

// LoadProfilePictureFile loads the user's ProfilePictureFile into the .R struct
func (os UserSlice) LoadProfilePictureFile(ctx context.Context, exec bob.Executor, mods ...bob.Mod[*dialect.SelectQuery]) error {
	if len(os) == 0 {
		return nil
	}

	files, err := os.ProfilePictureFile(mods...).All(ctx, exec)
	if err != nil {
		return err
	}

	for _, o := range os {
		if o == nil {
			continue
		}

		for _, rel := range files {
			if !o.ProfilePictureID.IsValue() {
				continue
			}

			if o.ProfilePictureID.MustGet() != rel.ID {
				continue
			}

			rel.R.ProfilePictureUsers = append(rel.R.ProfilePictureUsers, o)

			o.R.ProfilePictureFile = rel
			break
		}
	}

	return nil
}

type userJoins[Q dialect.Joinable] struct {
	typ                string
	Credentials        modAs[Q, credentialColumns]
	Files              modAs[Q, fileColumns]
	Items              modAs[Q, itemColumns]
	ProfilePictureFile modAs[Q, fileColumns]
}

func (j userJoins[Q]) aliasedAs(alias string) userJoins[Q] {
	return buildUserJoins[Q](buildUserColumns(alias), j.typ)
}

func buildUserJoins[Q dialect.Joinable](cols userColumns, typ string) userJoins[Q] {
	return userJoins[Q]{
		typ: typ,
		Credentials: modAs[Q, credentialColumns]{
			c: Credentials.Columns,
			f: func(to credentialColumns) bob.Mod[Q] {
				mods := make(mods.QueryMods[Q], 0, 1)

				{
					mods = append(mods, dialect.Join[Q](typ, Credentials.Name().As(to.Alias())).On(
						to.UserID.EQ(cols.ID),
					))
				}

				return mods
			},
		},
		Files: modAs[Q, fileColumns]{
			c: Files.Columns,
			f: func(to fileColumns) bob.Mod[Q] {
				mods := make(mods.QueryMods[Q], 0, 1)

				{
					mods = append(mods, dialect.Join[Q](typ, Files.Name().As(to.Alias())).On(
						to.UserID.EQ(cols.ID),
					))
				}

				return mods
			},
		},
		Items: modAs[Q, itemColumns]{
			c: Items.Columns,
			f: func(to itemColumns) bob.Mod[Q] {
				mods := make(mods.QueryMods[Q], 0, 1)

				{
					mods = append(mods, dialect.Join[Q](typ, Items.Name().As(to.Alias())).On(
						to.UserID.EQ(cols.ID),
					))
				}

				return mods
			},
		},
		ProfilePictureFile: modAs[Q, fileColumns]{
			c: Files.Columns,
			f: func(to fileColumns) bob.Mod[Q] {
				mods := make(mods.QueryMods[Q], 0, 1)

				{
					mods = append(mods, dialect.Join[Q](typ, Files.Name().As(to.Alias())).On(
						to.ID.EQ(cols.ProfilePictureID),
					))
				}

				return mods
			},
		},
	}
}

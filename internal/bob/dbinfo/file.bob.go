// Code generated by BobGen sql (devel). DO NOT EDIT.
// This file is meant to be re-generated in place and/or deleted at any time.

package dbinfo

import "github.com/aarondl/opt/null"

var Files = Table[
	fileColumns,
	fileIndexes,
	fileForeignKeys,
	fileUniques,
	fileChecks,
]{
	Schema: "",
	Name:   "file",
	Columns: fileColumns{
		ID: column{
			Name:      "id",
			DBType:    "INTEGER",
			Default:   "auto_increment",
			Comment:   "",
			Nullable:  false,
			Generated: false,
			AutoIncr:  false,
		},
		Name: column{
			Name:      "name",
			DBType:    "TEXT",
			Default:   "",
			Comment:   "",
			Nullable:  false,
			Generated: false,
			AutoIncr:  false,
		},
		Data: column{
			Name:      "data",
			DBType:    "BLOB",
			Default:   "",
			Comment:   "",
			Nullable:  false,
			Generated: false,
			AutoIncr:  false,
		},
		UserID: column{
			Name:      "user_id",
			DBType:    "INTEGER",
			Default:   "",
			Comment:   "",
			Nullable:  false,
			Generated: false,
			AutoIncr:  false,
		},
	},
	Indexes: fileIndexes{
		PKMainFile: index{
			Type: "pk",
			Name: "pk_main_file",
			Columns: []indexColumn{
				{
					Name:         "id",
					Desc:         null.FromCond(false, true),
					IsExpression: false,
				},
			},
			Unique:  true,
			Comment: "",
			Partial: false,
		},
	},
	PrimaryKey: &constraint{
		Name:    "pk_main_file",
		Columns: []string{"id"},
		Comment: "",
	},
	ForeignKeys: fileForeignKeys{
		FKFile0: foreignKey{
			constraint: constraint{
				Name:    "fk_file_0",
				Columns: []string{"user_id"},
				Comment: "",
			},
			ForeignTable:   "user",
			ForeignColumns: []string{"id"},
		},
	},

	Comment: "",
}

type fileColumns struct {
	ID     column
	Name   column
	Data   column
	UserID column
}

func (c fileColumns) AsSlice() []column {
	return []column{
		c.ID, c.Name, c.Data, c.UserID,
	}
}

type fileIndexes struct {
	PKMainFile index
}

func (i fileIndexes) AsSlice() []index {
	return []index{
		i.PKMainFile,
	}
}

type fileForeignKeys struct {
	FKFile0 foreignKey
}

func (f fileForeignKeys) AsSlice() []foreignKey {
	return []foreignKey{
		f.FKFile0,
	}
}

type fileUniques struct{}

func (u fileUniques) AsSlice() []constraint {
	return []constraint{}
}

type fileChecks struct{}

func (c fileChecks) AsSlice() []check {
	return []check{}
}

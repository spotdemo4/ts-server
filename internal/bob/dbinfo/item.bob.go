// Code generated by BobGen sql (devel). DO NOT EDIT.
// This file is meant to be re-generated in place and/or deleted at any time.

package dbinfo

import "github.com/aarondl/opt/null"

var Items = Table[
	itemColumns,
	itemIndexes,
	itemForeignKeys,
	itemUniques,
	itemChecks,
]{
	Schema: "",
	Name:   "item",
	Columns: itemColumns{
		ID: column{
			Name:      "id",
			DBType:    "INTEGER",
			Default:   "auto_increment",
			Comment:   "",
			Nullable:  false,
			Generated: false,
			AutoIncr:  false,
		},
		Name: column{
			Name:      "name",
			DBType:    "TEXT",
			Default:   "",
			Comment:   "",
			Nullable:  false,
			Generated: false,
			AutoIncr:  false,
		},
		Added: column{
			Name:      "added",
			DBType:    "DATETIME",
			Default:   "",
			Comment:   "",
			Nullable:  false,
			Generated: false,
			AutoIncr:  false,
		},
		Description: column{
			Name:      "description",
			DBType:    "TEXT",
			Default:   "",
			Comment:   "",
			Nullable:  false,
			Generated: false,
			AutoIncr:  false,
		},
		Price: column{
			Name:      "price",
			DBType:    "REAL",
			Default:   "",
			Comment:   "",
			Nullable:  false,
			Generated: false,
			AutoIncr:  false,
		},
		Quantity: column{
			Name:      "quantity",
			DBType:    "INTEGER",
			Default:   "",
			Comment:   "",
			Nullable:  false,
			Generated: false,
			AutoIncr:  false,
		},
		UserID: column{
			Name:      "user_id",
			DBType:    "INTEGER",
			Default:   "",
			Comment:   "",
			Nullable:  false,
			Generated: false,
			AutoIncr:  false,
		},
	},
	Indexes: itemIndexes{
		PKMainItem: index{
			Type: "pk",
			Name: "pk_main_item",
			Columns: []indexColumn{
				{
					Name:         "id",
					Desc:         null.FromCond(false, true),
					IsExpression: false,
				},
			},
			Unique:  true,
			Comment: "",
			Partial: false,
		},
	},
	PrimaryKey: &constraint{
		Name:    "pk_main_item",
		Columns: []string{"id"},
		Comment: "",
	},
	ForeignKeys: itemForeignKeys{
		FKItem0: foreignKey{
			constraint: constraint{
				Name:    "fk_item_0",
				Columns: []string{"user_id"},
				Comment: "",
			},
			ForeignTable:   "user",
			ForeignColumns: []string{"id"},
		},
	},

	Comment: "",
}

type itemColumns struct {
	ID          column
	Name        column
	Added       column
	Description column
	Price       column
	Quantity    column
	UserID      column
}

func (c itemColumns) AsSlice() []column {
	return []column{
		c.ID, c.Name, c.Added, c.Description, c.Price, c.Quantity, c.UserID,
	}
}

type itemIndexes struct {
	PKMainItem index
}

func (i itemIndexes) AsSlice() []index {
	return []index{
		i.PKMainItem,
	}
}

type itemForeignKeys struct {
	FKItem0 foreignKey
}

func (f itemForeignKeys) AsSlice() []foreignKey {
	return []foreignKey{
		f.FKItem0,
	}
}

type itemUniques struct{}

func (u itemUniques) AsSlice() []constraint {
	return []constraint{}
}

type itemChecks struct{}

func (c itemChecks) AsSlice() []check {
	return []check{}
}

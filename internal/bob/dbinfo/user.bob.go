// Code generated by BobGen sql (devel). DO NOT EDIT.
// This file is meant to be re-generated in place and/or deleted at any time.

package dbinfo

import "github.com/aarondl/opt/null"

var Users = Table[
	userColumns,
	userIndexes,
	userForeignKeys,
	userUniques,
	userChecks,
]{
	Schema: "",
	Name:   "user",
	Columns: userColumns{
		ID: column{
			Name:      "id",
			DBType:    "INTEGER",
			Default:   "auto_increment",
			Comment:   "",
			Nullable:  false,
			Generated: false,
			AutoIncr:  false,
		},
		Username: column{
			Name:      "username",
			DBType:    "TEXT",
			Default:   "",
			Comment:   "",
			Nullable:  false,
			Generated: false,
			AutoIncr:  false,
		},
		Password: column{
			Name:      "password",
			DBType:    "TEXT",
			Default:   "",
			Comment:   "",
			Nullable:  false,
			Generated: false,
			AutoIncr:  false,
		},
		ProfilePictureID: column{
			Name:      "profile_picture_id",
			DBType:    "INTEGER",
			Default:   "NULL",
			Comment:   "",
			Nullable:  true,
			Generated: false,
			AutoIncr:  false,
		},
		WebauthnID: column{
			Name:      "webauthn_id",
			DBType:    "TEXT",
			Default:   "",
			Comment:   "",
			Nullable:  false,
			Generated: false,
			AutoIncr:  false,
		},
	},
	Indexes: userIndexes{
		PKMainUser: index{
			Type: "pk",
			Name: "pk_main_user",
			Columns: []indexColumn{
				{
					Name:         "id",
					Desc:         null.FromCond(false, true),
					IsExpression: false,
				},
			},
			Unique:  true,
			Comment: "",
			Partial: false,
		},
	},
	PrimaryKey: &constraint{
		Name:    "pk_main_user",
		Columns: []string{"id"},
		Comment: "",
	},
	ForeignKeys: userForeignKeys{
		FKUser0: foreignKey{
			constraint: constraint{
				Name:    "fk_user_0",
				Columns: []string{"profile_picture_id"},
				Comment: "",
			},
			ForeignTable:   "file",
			ForeignColumns: []string{"id"},
		},
	},

	Comment: "",
}

type userColumns struct {
	ID               column
	Username         column
	Password         column
	ProfilePictureID column
	WebauthnID       column
}

func (c userColumns) AsSlice() []column {
	return []column{
		c.ID, c.Username, c.Password, c.ProfilePictureID, c.WebauthnID,
	}
}

type userIndexes struct {
	PKMainUser index
}

func (i userIndexes) AsSlice() []index {
	return []index{
		i.PKMainUser,
	}
}

type userForeignKeys struct {
	FKUser0 foreignKey
}

func (f userForeignKeys) AsSlice() []foreignKey {
	return []foreignKey{
		f.FKUser0,
	}
}

type userUniques struct{}

func (u userUniques) AsSlice() []constraint {
	return []constraint{}
}

type userChecks struct{}

func (c userChecks) AsSlice() []check {
	return []check{}
}

// Code generated by BobGen sql (devel). DO NOT EDIT.
// This file is meant to be re-generated in place and/or deleted at any time.

package factory

import (
	"context"
	"time"

	"github.com/aarondl/opt/null"
	models "github.com/spotdemo4/ts-server/internal/bob/models"
)

type Factory struct {
	baseCredentialMods      CredentialModSlice
	baseFileMods            FileModSlice
	baseItemMods            ItemModSlice
	baseSchemaMigrationMods SchemaMigrationModSlice
	baseUserMods            UserModSlice
}

func New() *Factory {
	return &Factory{}
}

func (f *Factory) NewCredential(mods ...CredentialMod) *CredentialTemplate {
	return f.NewCredentialWithContext(context.Background(), mods...)
}

func (f *Factory) NewCredentialWithContext(ctx context.Context, mods ...CredentialMod) *CredentialTemplate {
	o := &CredentialTemplate{f: f}

	if f != nil {
		f.baseCredentialMods.Apply(ctx, o)
	}

	CredentialModSlice(mods).Apply(ctx, o)

	return o
}

func (f *Factory) FromExistingCredential(m *models.Credential) *CredentialTemplate {
	o := &CredentialTemplate{f: f, alreadyPersisted: true}

	o.CredID = func() string { return m.CredID }
	o.CredPublicKey = func() []byte { return m.CredPublicKey }
	o.SignCount = func() int32 { return m.SignCount }
	o.Transports = func() null.Val[string] { return m.Transports }
	o.UserVerified = func() null.Val[bool] { return m.UserVerified }
	o.BackupEligible = func() null.Val[bool] { return m.BackupEligible }
	o.BackupState = func() null.Val[bool] { return m.BackupState }
	o.AttestationObject = func() null.Val[[]byte] { return m.AttestationObject }
	o.AttestationClientData = func() null.Val[[]byte] { return m.AttestationClientData }
	o.CreatedAt = func() time.Time { return m.CreatedAt }
	o.LastUsed = func() time.Time { return m.LastUsed }
	o.UserID = func() int32 { return m.UserID }

	ctx := context.Background()
	if m.R.User != nil {
		CredentialMods.WithExistingUser(m.R.User).Apply(ctx, o)
	}

	return o
}

func (f *Factory) NewFile(mods ...FileMod) *FileTemplate {
	return f.NewFileWithContext(context.Background(), mods...)
}

func (f *Factory) NewFileWithContext(ctx context.Context, mods ...FileMod) *FileTemplate {
	o := &FileTemplate{f: f}

	if f != nil {
		f.baseFileMods.Apply(ctx, o)
	}

	FileModSlice(mods).Apply(ctx, o)

	return o
}

func (f *Factory) FromExistingFile(m *models.File) *FileTemplate {
	o := &FileTemplate{f: f, alreadyPersisted: true}

	o.ID = func() int32 { return m.ID }
	o.Name = func() string { return m.Name }
	o.Data = func() []byte { return m.Data }
	o.UserID = func() int32 { return m.UserID }

	ctx := context.Background()
	if m.R.User != nil {
		FileMods.WithExistingUser(m.R.User).Apply(ctx, o)
	}
	if len(m.R.ProfilePictureUsers) > 0 {
		FileMods.AddExistingProfilePictureUsers(m.R.ProfilePictureUsers...).Apply(ctx, o)
	}

	return o
}

func (f *Factory) NewItem(mods ...ItemMod) *ItemTemplate {
	return f.NewItemWithContext(context.Background(), mods...)
}

func (f *Factory) NewItemWithContext(ctx context.Context, mods ...ItemMod) *ItemTemplate {
	o := &ItemTemplate{f: f}

	if f != nil {
		f.baseItemMods.Apply(ctx, o)
	}

	ItemModSlice(mods).Apply(ctx, o)

	return o
}

func (f *Factory) FromExistingItem(m *models.Item) *ItemTemplate {
	o := &ItemTemplate{f: f, alreadyPersisted: true}

	o.ID = func() int32 { return m.ID }
	o.Name = func() string { return m.Name }
	o.Added = func() time.Time { return m.Added }
	o.Description = func() string { return m.Description }
	o.Price = func() float32 { return m.Price }
	o.Quantity = func() int32 { return m.Quantity }
	o.UserID = func() int32 { return m.UserID }

	ctx := context.Background()
	if m.R.User != nil {
		ItemMods.WithExistingUser(m.R.User).Apply(ctx, o)
	}

	return o
}

func (f *Factory) NewSchemaMigration(mods ...SchemaMigrationMod) *SchemaMigrationTemplate {
	return f.NewSchemaMigrationWithContext(context.Background(), mods...)
}

func (f *Factory) NewSchemaMigrationWithContext(ctx context.Context, mods ...SchemaMigrationMod) *SchemaMigrationTemplate {
	o := &SchemaMigrationTemplate{f: f}

	if f != nil {
		f.baseSchemaMigrationMods.Apply(ctx, o)
	}

	SchemaMigrationModSlice(mods).Apply(ctx, o)

	return o
}

func (f *Factory) FromExistingSchemaMigration(m *models.SchemaMigration) *SchemaMigrationTemplate {
	o := &SchemaMigrationTemplate{f: f, alreadyPersisted: true}

	o.Version = func() string { return m.Version }

	return o
}

func (f *Factory) NewUser(mods ...UserMod) *UserTemplate {
	return f.NewUserWithContext(context.Background(), mods...)
}

func (f *Factory) NewUserWithContext(ctx context.Context, mods ...UserMod) *UserTemplate {
	o := &UserTemplate{f: f}

	if f != nil {
		f.baseUserMods.Apply(ctx, o)
	}

	UserModSlice(mods).Apply(ctx, o)

	return o
}

func (f *Factory) FromExistingUser(m *models.User) *UserTemplate {
	o := &UserTemplate{f: f, alreadyPersisted: true}

	o.ID = func() int32 { return m.ID }
	o.Username = func() string { return m.Username }
	o.Password = func() string { return m.Password }
	o.ProfilePictureID = func() null.Val[int32] { return m.ProfilePictureID }
	o.WebauthnID = func() string { return m.WebauthnID }

	ctx := context.Background()
	if len(m.R.Credentials) > 0 {
		UserMods.AddExistingCredentials(m.R.Credentials...).Apply(ctx, o)
	}
	if len(m.R.Files) > 0 {
		UserMods.AddExistingFiles(m.R.Files...).Apply(ctx, o)
	}
	if len(m.R.Items) > 0 {
		UserMods.AddExistingItems(m.R.Items...).Apply(ctx, o)
	}
	if m.R.ProfilePictureFile != nil {
		UserMods.WithExistingProfilePictureFile(m.R.ProfilePictureFile).Apply(ctx, o)
	}

	return o
}

func (f *Factory) ClearBaseCredentialMods() {
	f.baseCredentialMods = nil
}

func (f *Factory) AddBaseCredentialMod(mods ...CredentialMod) {
	f.baseCredentialMods = append(f.baseCredentialMods, mods...)
}

func (f *Factory) ClearBaseFileMods() {
	f.baseFileMods = nil
}

func (f *Factory) AddBaseFileMod(mods ...FileMod) {
	f.baseFileMods = append(f.baseFileMods, mods...)
}

func (f *Factory) ClearBaseItemMods() {
	f.baseItemMods = nil
}

func (f *Factory) AddBaseItemMod(mods ...ItemMod) {
	f.baseItemMods = append(f.baseItemMods, mods...)
}

func (f *Factory) ClearBaseSchemaMigrationMods() {
	f.baseSchemaMigrationMods = nil
}

func (f *Factory) AddBaseSchemaMigrationMod(mods ...SchemaMigrationMod) {
	f.baseSchemaMigrationMods = append(f.baseSchemaMigrationMods, mods...)
}

func (f *Factory) ClearBaseUserMods() {
	f.baseUserMods = nil
}

func (f *Factory) AddBaseUserMod(mods ...UserMod) {
	f.baseUserMods = append(f.baseUserMods, mods...)
}

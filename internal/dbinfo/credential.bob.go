// Code generated by BobGen sql (devel). DO NOT EDIT.
// This file is meant to be re-generated in place and/or deleted at any time.

package dbinfo

import "github.com/aarondl/opt/null"

var Credentials = Table[
	credentialColumns,
	credentialIndexes,
	credentialForeignKeys,
	credentialUniques,
	credentialChecks,
]{
	Schema: "",
	Name:   "credential",
	Columns: credentialColumns{
		CredID: column{
			Name:      "cred_id",
			DBType:    "TEXT",
			Default:   "",
			Comment:   "",
			Nullable:  false,
			Generated: false,
			AutoIncr:  false,
		},
		CredPublicKey: column{
			Name:      "cred_public_key",
			DBType:    "BLOB",
			Default:   "",
			Comment:   "",
			Nullable:  false,
			Generated: false,
			AutoIncr:  false,
		},
		SignCount: column{
			Name:      "sign_count",
			DBType:    "INTEGER",
			Default:   "",
			Comment:   "",
			Nullable:  false,
			Generated: false,
			AutoIncr:  false,
		},
		Transports: column{
			Name:      "transports",
			DBType:    "TEXT",
			Default:   "NULL",
			Comment:   "",
			Nullable:  true,
			Generated: false,
			AutoIncr:  false,
		},
		UserVerified: column{
			Name:      "user_verified",
			DBType:    "BOOLEAN",
			Default:   "NULL",
			Comment:   "",
			Nullable:  true,
			Generated: false,
			AutoIncr:  false,
		},
		BackupEligible: column{
			Name:      "backup_eligible",
			DBType:    "BOOLEAN",
			Default:   "NULL",
			Comment:   "",
			Nullable:  true,
			Generated: false,
			AutoIncr:  false,
		},
		BackupState: column{
			Name:      "backup_state",
			DBType:    "BOOLEAN",
			Default:   "NULL",
			Comment:   "",
			Nullable:  true,
			Generated: false,
			AutoIncr:  false,
		},
		AttestationObject: column{
			Name:      "attestation_object",
			DBType:    "BLOB",
			Default:   "NULL",
			Comment:   "",
			Nullable:  true,
			Generated: false,
			AutoIncr:  false,
		},
		AttestationClientData: column{
			Name:      "attestation_client_data",
			DBType:    "BLOB",
			Default:   "NULL",
			Comment:   "",
			Nullable:  true,
			Generated: false,
			AutoIncr:  false,
		},
		CreatedAt: column{
			Name:      "created_at",
			DBType:    "DATETIME",
			Default:   "",
			Comment:   "",
			Nullable:  false,
			Generated: false,
			AutoIncr:  false,
		},
		LastUsed: column{
			Name:      "last_used",
			DBType:    "DATETIME",
			Default:   "",
			Comment:   "",
			Nullable:  false,
			Generated: false,
			AutoIncr:  false,
		},
		UserID: column{
			Name:      "user_id",
			DBType:    "INTEGER",
			Default:   "",
			Comment:   "",
			Nullable:  false,
			Generated: false,
			AutoIncr:  false,
		},
	},
	Indexes: credentialIndexes{
		SqliteAutoindexCredential1: index{
			Type: "pk",
			Name: "sqlite_autoindex_credential_1",
			Columns: []indexColumn{
				{
					Name:         "cred_id",
					Desc:         null.FromCond(false, true),
					IsExpression: false,
				},
			},
			Unique:  true,
			Comment: "",
			Partial: false,
		},
	},
	PrimaryKey: &constraint{
		Name:    "pk_main_credential",
		Columns: []string{"cred_id"},
		Comment: "",
	},
	ForeignKeys: credentialForeignKeys{
		FKCredential0: foreignKey{
			constraint: constraint{
				Name:    "fk_credential_0",
				Columns: []string{"user_id"},
				Comment: "",
			},
			ForeignTable:   "user",
			ForeignColumns: []string{"id"},
		},
	},

	Comment: "",
}

type credentialColumns struct {
	CredID                column
	CredPublicKey         column
	SignCount             column
	Transports            column
	UserVerified          column
	BackupEligible        column
	BackupState           column
	AttestationObject     column
	AttestationClientData column
	CreatedAt             column
	LastUsed              column
	UserID                column
}

func (c credentialColumns) AsSlice() []column {
	return []column{
		c.CredID, c.CredPublicKey, c.SignCount, c.Transports, c.UserVerified, c.BackupEligible, c.BackupState, c.AttestationObject, c.AttestationClientData, c.CreatedAt, c.LastUsed, c.UserID,
	}
}

type credentialIndexes struct {
	SqliteAutoindexCredential1 index
}

func (i credentialIndexes) AsSlice() []index {
	return []index{
		i.SqliteAutoindexCredential1,
	}
}

type credentialForeignKeys struct {
	FKCredential0 foreignKey
}

func (f credentialForeignKeys) AsSlice() []foreignKey {
	return []foreignKey{
		f.FKCredential0,
	}
}

type credentialUniques struct{}

func (u credentialUniques) AsSlice() []constraint {
	return []constraint{}
}

type credentialChecks struct{}

func (c credentialChecks) AsSlice() []check {
	return []check{}
}
